{"expireTime":9007200851379627000,"key":"transformer-remark-markdown-html-54299a181ea9cff0eeac0dd15189f102-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-emojis-","val":"<p><img src=\"https://p5.ssl.qhimg.com/t01771478e667255d55.png\" alt=\"mousetrack_img\"></p>\n<h3>需求背景</h3>\n<p>🚩 为了统计分析用户页面行为，我们经常需要收集鼠标在页面上的各类操作，如页面中按钮和链接的点击和统计较准确的访客页面停留时间。而本文主要记录在解决<code class=\"language-text\">分别记录鼠标在页面各个区域的停留时间总和</code>这一问题的技术方案的尝试。</p>\n<p>简化问题描述：将浏览器的可视窗口平均分为 2 × 2 的 4 份， 如图。分别记录鼠标在各个区域的停留时间总和，当然，不能影响页面的正常功能的使用。</p>\n<p><img src=\"https://p5.ssl.qhimg.com/t01752acf18ecbe6aa7.png\" alt=\"页面区域示意\"></p>\n<p>当鼠标进入某块区域时开始计时， 移出时结束计时。那问题就在于如何判断鼠标的所在区域。</p>\n<p>于是， 自然就想到了通过鼠标的坐标来判断所处区域 。</p>\n<h3>Solution 1</h3>\n<p>监听鼠标的 mousemove 事件， 获取鼠标的坐标(x, y), 根据它来判断鼠标当前处在哪个区域，然后累加当前区域的记录时间。</p>\n<p>此外， 需要对该事件的触发频率进行优化，避免触发频率过快，造成不必要的计算开销。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 主要代码</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mouseTrack</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mousemove\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">debounceTime</span><span class=\"token punctuation\">(</span>sampleTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token operator\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> clientX<span class=\"token punctuation\">,</span> clientY <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> e\n      <span class=\"token keyword\">let</span> currentPart<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token comment\">// 计算所在区域</span>\n        Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>clientX <span class=\"token operator\">/</span> unitWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>clientY <span class=\"token operator\">/</span> unitHeight<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        record<span class=\"token punctuation\">[</span>lastPart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>duration <span class=\"token operator\">+=</span> now <span class=\"token operator\">-</span> tick\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n      tick <span class=\"token operator\">=</span> now\n      lastPart <span class=\"token operator\">=</span> currentPart\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>问题似乎就这样愉快的被解决了！</p>\n<p>但是经过一番测试之后， 发现了一些不足的地方。</p>\n<ul>\n<li>页面加载后， 若鼠标一直不动， 则无法触发事件，进而无法判断所在区域（疑无解）</li>\n<li>当用户以较快的速度移动，有时导致统计的时间和所在区域对应错误（统计的准确性有待提高）</li>\n<li>实际需要统计的区域肯定不是简单均分页面的 4 块区域， 实际判断鼠标所在区域的计算会更复杂</li>\n</ul>\n<p>对于 mousemove 这类触发频繁的事件， 在其他如 drag， window resize， scroll 的场景下，可以使用函数节流、防抖等操作优化执行频率，且无明显副作用。但在此需求下，如果时间间隔过大，统计的准确性明显下降，如果时间间隔太小甚至不对触发频率进行限制， 而增加的性能开销也不是我们想要的。</p>\n<p>难道，就秉持中庸之道， 取个中间值？</p>\n<p>后期也了解到通过分析搜集海量的这种统计数据， 清洗极端数据， 一通分析之后，也可以得到较准确的结果。单纯的收集鼠标在某个区域的时间意义不大， 主要还是通过海量的数据搜集分析， 进而了解用户在页面上行为、喜好、热点区域等。</p>\n<p>道理是都懂，但是作为一个优秀的程序员， 总是想在自己的一亩三分地写出更好的代码，能不能提供比较准确的数据，又不会产生较大的性能开销？</p>\n<h3>Solution 2</h3>\n<p>上述方式需要频繁的触发事件， 主要是为了获取鼠标当前所在区域， 那我就在统计区域上加个透明 div, 当 div 的<code class=\"language-text\">mouseenter</code>事件触发时，开始计时， 触发<code class=\"language-text\">mouseleave</code>时， 结束计时。加上后，发现由于 div 的遮盖， 页面中的各类按钮，链接都无法触发。这肯定不行， 又查了一下事件穿透， get 了<a href=\"https://www.w3.org/TR/SVG/interact.html#PointerEventsProperty\">pointer-events</a>属性.</p>\n<p><code class=\"language-text\">pointer-events</code>可以禁用鼠标事件， 允许事件穿透，常用的属性值(auto / none), 其他属性值只适用于 svg 元素</p>\n<p>愉快的加上该属性， 发现透明 div 的 mouseenter/mouseleave 事件也被禁止，无法触发了…</p>\n<p>稳住心态，思索了一下</p>\n<p><img src=\"https://p3.ssl.qhimg.com/t012d3f90a084507415.png\" alt=\"pointer-evnets\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">鼠标首次移动：\n\t记录开始时间\n\t当前所在区域 pointer-events: none;\n某一区域触发mouseenter事件：\n\t该区域变成 pointer-events: none;\n\t原来区域 pointer-events: all;\n\t记录原区域的停留时间\n\t记录进入新区域的时间</code></pre></div>\n<p>鼠标当前所在的透明的 div 区域处于事件穿透状态， 其他区域被 div 正常覆盖，当鼠标移入其他区域时， 移入区域变成事件穿透状态(页面的链接、按钮等功能正常)， 原来区域还原。</p>\n<p>通过这种方式，可以较好的解决上面的问题</p>\n<ul>\n<li>不用 mousemove 这种频繁触发的事件，节省了额外的开销</li>\n<li>只要鼠标的移动速度在浏览器的捕获范围内， 它在不同区域之间的切换都能很好的触发事件， 大大提供了统计数据的准确性</li>\n</ul>\n<p>不足：</p>\n<ul>\n<li>pointer-events 的兼容性， 兼容到 IE11 (硬伤)</li>\n</ul>\n<p>还有一点瑕疵，就是鼠标在不同区域移动时， 需要操作 div 的 pointer-events 属性在 all 和 none 之间切换， 且在非鼠标所在区域，透明 div 是遮挡页面鼠标的各种事件的。能不能不让它遮挡呢？</p>\n<h3>Solution 3</h3>\n<p>其实，是看中了 pointer-events 的<code class=\"language-text\">stroke</code>属性值， 利用它， 可以使得在元素<strong>内部</strong>事件穿透， 在元素<strong>边框</strong>触发事件，极好的满足了我的诉求, 由于该属性只在 SVG 下生效，于是将透明 div 换成了 SVG 元素。</p>\n<p><img src=\"https://p0.ssl.qhimg.com/t01d62897a2fba37bbe.png\" alt=\"pointer-events-border\"></p>\n<p>实际测试一番后发现，要以较慢的速度移动鼠标，才会触发 SVG 边框的事件，稍快移动鼠标， 边框就无法捕捉事件。由于边框的宽度有限， 移动太快， 就超出了浏览器的捕捉极限。之后又试着增大了边框的宽度， 但效果变化不是很明显。</p>\n<p>感觉有点奇怪， 于是新建一个测试页面，监听一个边框为 1px 的 div，在我的手速极限内， <code class=\"language-text\">mouseenter</code>事件正常触发。但是在 svg 里面为什么触发比较艰难呢？</p>\n<p>是浏览器的极限就是这样，还是我写的 SVG 有问题？一直没有解决这个问题，欢迎大家指教 。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">drawsvg</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> svgns <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.w3.org/2000/svg\"</span>\n  <span class=\"token keyword\">let</span> svg <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElementNS</span><span class=\"token punctuation\">(</span>svgns<span class=\"token punctuation\">,</span> <span class=\"token string\">\"svg\"</span><span class=\"token punctuation\">)</span>\n  svg<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// other attribute</span>\n  svg<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"style\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointer-events: none;\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> polygon <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElementNS</span><span class=\"token punctuation\">(</span>svgns<span class=\"token punctuation\">,</span> <span class=\"token string\">\"polygon\"</span><span class=\"token punctuation\">)</span>\n  polygon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// other attribute</span>\n  polygon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"style\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointer-events: stroke;\"</span><span class=\"token punctuation\">)</span>\n\n  svg<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>polygon<span class=\"token punctuation\">)</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>svg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>后记</h3>\n<p>本篇文章主要记录在解决<strong>记录鼠标在页面各个区域的停留时间总和</strong>这一需求时的实现方式的尝试和解决相应问题的进一步尝试。现阶段，选择的是方案二和方案一组合使用，在满足 pointer-events 属性的兼容性情况下，使用方案二， 退之， 则使用第一种方案。</p>\n<p><em>如文章有任何 bug，欢迎指出</em>！</p>"}