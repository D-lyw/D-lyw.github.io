{"expireTime":9007200851087945000,"key":"transformer-remark-markdown-html-ast-e706ed904f922f1dc5ca8ea57cc50b72-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-emojis-","val":{"type":"root","children":[{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Linux 系统的一大特点是它的网络编程能力十分强大, 学习它, 让我们真正体会网络的魅力!","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":49,"offset":49}}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":49,"offset":49}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":49,"offset":49}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"一. 客户机/服务器模型","position":{"start":{"line":4,"column":4,"offset":54},"end":{"line":4,"column":16,"offset":66}}}],"position":{"start":{"line":4,"column":1,"offset":51},"end":{"line":4,"column":16,"offset":66}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"网络应用程序一般是以 c/s 模型的方式工作的,因特网便是 c/s 模型的一个典型例子,在这种工作方式中,一个服务器通常事先启动,并在一个熟知端口帧听对服务器的请求,如 ftp 服务器,web 服务器等.当客户机应用程序需要某种服务时,需向提供这个服务的服务器发出请求,服务器收到请求后,向客户机发出相应请求服务.这样客户机应用程序和服务器程序之间就建立了通信连接,此后便可以进行数据通信,通信任务完成后,需要关闭它们之间的通信连接.","position":{"start":{"line":6,"column":1,"offset":68},"end":{"line":6,"column":218,"offset":285}}}],"position":{"start":{"line":6,"column":1,"offset":68},"end":{"line":6,"column":218,"offset":285}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"￼","position":{"start":{"line":8,"column":1,"offset":287},"end":{"line":8,"column":2,"offset":288}}},{"type":"element","tagName":"img","properties":{"src":"https://img-blog.csdnimg.cn/2018120111460362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTU4Mjg1,size_16,color_FFFFFF,t_70","alt":"C_S_chart_flow"},"children":[],"position":{"start":{"line":8,"column":2,"offset":288},"end":{"line":8,"column":210,"offset":496}}}],"position":{"start":{"line":8,"column":1,"offset":287},"end":{"line":8,"column":210,"offset":496}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"二. 网络套接字(socket)介绍","position":{"start":{"line":10,"column":4,"offset":501},"end":{"line":10,"column":22,"offset":519}}}],"position":{"start":{"line":10,"column":1,"offset":498},"end":{"line":10,"column":22,"offset":519}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在网路中要全局的标示一个参与通信的进程,需要采用三元组:　","position":{"start":{"line":12,"column":1,"offset":521},"end":{"line":12,"column":30,"offset":550}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"协议，主机 ip 地址,端口号","position":{"start":{"line":12,"column":33,"offset":553},"end":{"line":12,"column":48,"offset":568}}}],"position":{"start":{"line":12,"column":32,"offset":552},"end":{"line":12,"column":49,"offset":569}}}],"position":{"start":{"line":12,"column":30,"offset":550},"end":{"line":12,"column":51,"offset":571}}},{"type":"text","value":".\n要描述两个应用进程之间的端到端的通信则需要一个五元组: ","position":{"start":{"line":12,"column":51,"offset":571},"end":{"line":13,"column":29,"offset":601}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"协议,信源机 ip 地址,信源应用进程端口, 信宿机 ip 地址,信宿应用进程端口","position":{"start":{"line":13,"column":32,"offset":604},"end":{"line":13,"column":73,"offset":645}}}],"position":{"start":{"line":13,"column":31,"offset":603},"end":{"line":13,"column":74,"offset":646}}}],"position":{"start":{"line":13,"column":29,"offset":601},"end":{"line":13,"column":76,"offset":648}}},{"type":"text","value":".\n那么从程序设计的角度如何实现两个应用进程的通信连接的建立,并如何实现两个进程指佳酿数据传输呢?人们引入套接字(Socket)的概念.","position":{"start":{"line":13,"column":76,"offset":648},"end":{"line":14,"column":67,"offset":716}}}],"position":{"start":{"line":12,"column":1,"offset":521},"end":{"line":14,"column":67,"offset":716}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"￼","position":{"start":{"line":16,"column":1,"offset":718},"end":{"line":16,"column":2,"offset":719}}},{"type":"element","tagName":"img","properties":{"src":"https://img-blog.csdnimg.cn/20181201114726459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTU4Mjg1,size_16,color_FFFFFF,t_70","alt":"Socket_flow"},"children":[],"position":{"start":{"line":16,"column":2,"offset":719},"end":{"line":16,"column":208,"offset":925}}}],"position":{"start":{"line":16,"column":1,"offset":718},"end":{"line":16,"column":208,"offset":925}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"套接字实现了对网络和传输层协议的封装","position":{"start":{"line":18,"column":3,"offset":929},"end":{"line":18,"column":21,"offset":947}}}],"position":{"start":{"line":18,"column":1,"offset":927},"end":{"line":18,"column":21,"offset":947}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"套接字可以看做是处于不同主机之间的两个进程的通信连接端点","position":{"start":{"line":19,"column":3,"offset":950},"end":{"line":19,"column":31,"offset":978}}}],"position":{"start":{"line":19,"column":1,"offset":948},"end":{"line":19,"column":31,"offset":978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"在实现两个进程间的通信时, 首先应用进程各自创建自己的套接字,然后通过套接字建立双方的通信链路,进而利用各自的套接字进行数据的发送个接收","position":{"start":{"line":20,"column":3,"offset":981},"end":{"line":20,"column":71,"offset":1049}}}],"position":{"start":{"line":20,"column":1,"offset":979},"end":{"line":20,"column":71,"offset":1049}}},{"type":"text","value":"\n"}],"position":{"start":{"line":18,"column":1,"offset":927},"end":{"line":20,"column":71,"offset":1049}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"socket 这个词可以表示很多概念：","position":{"start":{"line":22,"column":1,"offset":1051},"end":{"line":22,"column":20,"offset":1070}}}],"position":{"start":{"line":22,"column":1,"offset":1051},"end":{"line":22,"column":20,"offset":1070}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"在 TCP/IP 协议中，“IP 地址+TCP 或 UDP 端口号”唯一标识网络通讯中的一个进程，“IP 地址+端口号”就称为 socket。","position":{"start":{"line":24,"column":3,"offset":1074},"end":{"line":24,"column":74,"offset":1145}}}],"position":{"start":{"line":24,"column":1,"offset":1072},"end":{"line":25,"column":1,"offset":1146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"在 TCP 协议中，建立连接的两个进程各自有一个 socket 来标识，那么这两个 socket 组成的 socket pair 就唯一标识一个连接。socket 本身有“插座”的意思，因此用来","position":{"start":{"line":26,"column":3,"offset":1149},"end":{"line":26,"column":100,"offset":1246}}},{"type":"raw","value":"<code class=\"language-text\">描述网络连接的一对一关系</code>","position":{"start":{"line":26,"column":100,"offset":1246},"end":{"line":26,"column":114,"offset":1260}}},{"type":"text","value":"。","position":{"start":{"line":26,"column":114,"offset":1260},"end":{"line":26,"column":115,"offset":1261}}}],"position":{"start":{"line":26,"column":1,"offset":1147},"end":{"line":27,"column":1,"offset":1262}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"TCP/IP 协议最早在 BSD UNIX 上实现，为 TCP/IP 协议设计的应用层编程接口称为 socket API","position":{"start":{"line":28,"column":3,"offset":1265},"end":{"line":28,"column":63,"offset":1325}}}],"position":{"start":{"line":28,"column":1,"offset":1263},"end":{"line":28,"column":63,"offset":1325}}},{"type":"text","value":"\n"}],"position":{"start":{"line":24,"column":1,"offset":1072},"end":{"line":28,"column":63,"offset":1325}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Socket 进一步介绍:\n","position":{"start":{"line":30,"column":1,"offset":1327},"end":{"line":31,"column":1,"offset":1341}}},{"type":"raw","value":"<code class=\"language-text\">socket是使用标准unix文件描述符(file descriptor)和其他程序通讯的方式</code>","position":{"start":{"line":31,"column":1,"offset":1341},"end":{"line":31,"column":50,"offset":1390}}},{"type":"text","value":". Unix 中的一切都是文件,接触过 Unix/Linux,就一定会听过这句话. 实际上, unix 程序在执行任何形式的 I/O 时,程序都是在读或者写一个文件描述符. 一个文件描述符只是一个跟打开的文件相关联的整数, 这个文件可能是一个网络连接, FIFO, 管道, 终端, 文件或者什么其他东西. 所以你要和网络上的其他程序通信时,你就要用到文件描述符, 那怎么得到网络通信的文件描述符呢?\n利用系统调用 socket(),它会返回套接字描述符(socket descriptor), 然后就可以用它来 send(), recv() ,发送接收数据.","position":{"start":{"line":31,"column":50,"offset":1390},"end":{"line":32,"column":80,"offset":1669}}}],"position":{"start":{"line":30,"column":1,"offset":1327},"end":{"line":32,"column":80,"offset":1669}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"三. 套接字编程基础","position":{"start":{"line":34,"column":4,"offset":1674},"end":{"line":34,"column":14,"offset":1684}}}],"position":{"start":{"line":34,"column":1,"offset":1671},"end":{"line":34,"column":14,"offset":1684}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tcp/Ip 的核心内容被封装在操作系统中,网络应用程序要使用 Tcp/Ip 来实现自己的功能,需要通过操作系统提供给用户的编程接口来实现. 套接字就是 Tcp/Ip 网络编程接口的集合,他是应用程序 Tcp/Ip 协议族通信的中间软件抽象层.","position":{"start":{"line":36,"column":3,"offset":1688},"end":{"line":36,"column":125,"offset":1810}}}],"position":{"start":{"line":36,"column":3,"offset":1688},"end":{"line":36,"column":125,"offset":1810}}},{"type":"text","value":"\n"}],"position":{"start":{"line":36,"column":1,"offset":1686},"end":{"line":36,"column":125,"offset":1810}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"1. socket","position":{"start":{"line":38,"column":5,"offset":1816},"end":{"line":38,"column":14,"offset":1825}}}],"position":{"start":{"line":38,"column":1,"offset":1812},"end":{"line":38,"column":14,"offset":1825}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// socket - create an endpoint for communication</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> domain<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> protocol<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// DESCRIPTION</span>\n<span class=\"token comment\">//       socket() creates an endpoint for communication and returns a file descriptor that</span>\n<span class=\"token comment\">//       refers to that endpoint.  The file descriptor returned by a successful call will</span>\n<span class=\"token comment\">//       be the lowest-numbered file descrip‐tor not currently open for the process.</span></code></pre></div>","position":{"start":{"line":40,"column":1,"offset":1827},"end":{"line":53,"column":4,"offset":2262}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"domain","position":{"start":{"line":55,"column":3,"offset":2266},"end":{"line":55,"column":9,"offset":2272}}}],"position":{"start":{"line":55,"column":1,"offset":2264},"end":{"line":55,"column":11,"offset":2274}}},{"type":"text","value":": 说明我们网络程序所在的主机采用的通讯协族(AF","position":{"start":{"line":55,"column":11,"offset":2274},"end":{"line":55,"column":36,"offset":2299}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"UNIX 和 AF","position":{"start":{"line":55,"column":37,"offset":2300},"end":{"line":55,"column":46,"offset":2309}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"INET 等). AF","position":{"start":{"line":55,"column":47,"offset":2310},"end":{"line":55,"column":58,"offset":2321}}}],"position":{"start":{"line":55,"column":46,"offset":2309},"end":{"line":55,"column":59,"offset":2322}}},{"type":"text","value":"UNIX 只能够用于单一的 Unix 系统进程间通信,而 AF_INET 是针对 Internet 的,因而可以允许在远程主机之间通信(当我们 man socket 时发现 domain 可选项是 PF","position":{"start":{"line":55,"column":59,"offset":2322},"end":{"line":55,"column":160,"offset":2423}}}],"position":{"start":{"line":55,"column":36,"offset":2299},"end":{"line":55,"column":161,"offset":2424}}},{"type":"text","value":"_","position":{"start":{"line":55,"column":161,"offset":2424},"end":{"line":55,"column":163,"offset":2426}}},{"type":"text","value":"而不是 AF","position":{"start":{"line":55,"column":163,"offset":2426},"end":{"line":55,"column":169,"offset":2432}}},{"type":"text","value":"_","position":{"start":{"line":55,"column":169,"offset":2432},"end":{"line":55,"column":171,"offset":2434}}},{"type":"text","value":"_","position":{"start":{"line":55,"column":171,"offset":2434},"end":{"line":55,"column":173,"offset":2436}}},{"type":"text","value":",因为 glibc 是 posix 的实现 所以用 PF 代替了 AF,不过我们都可以使用的).","position":{"start":{"line":55,"column":173,"offset":2436},"end":{"line":55,"column":221,"offset":2484}}}],"position":{"start":{"line":55,"column":1,"offset":2264},"end":{"line":55,"column":221,"offset":2484}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"type","position":{"start":{"line":57,"column":3,"offset":2488},"end":{"line":57,"column":7,"offset":2492}}}],"position":{"start":{"line":57,"column":1,"offset":2486},"end":{"line":57,"column":9,"offset":2494}}},{"type":"text","value":": 指网络程序所采用的通讯协议(SOCK","position":{"start":{"line":57,"column":9,"offset":2494},"end":{"line":57,"column":29,"offset":2514}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"STREAM,SOCK","position":{"start":{"line":57,"column":30,"offset":2515},"end":{"line":57,"column":41,"offset":2526}}}],"position":{"start":{"line":57,"column":29,"offset":2514},"end":{"line":57,"column":42,"offset":2527}}},{"type":"text","value":"DGRAM 等)","position":{"start":{"line":57,"column":42,"offset":2527},"end":{"line":57,"column":50,"offset":2535}}}],"position":{"start":{"line":57,"column":1,"offset":2486},"end":{"line":57,"column":50,"offset":2535}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">SOCK_STREAM</code>","position":{"start":{"line":59,"column":3,"offset":2539},"end":{"line":59,"column":16,"offset":2552}}},{"type":"text","value":" (流套接字) 表明我们用的是 TCP 协议,这样会提供按顺序的,可靠,双向,面向连接的比特流.","position":{"start":{"line":59,"column":16,"offset":2552},"end":{"line":59,"column":64,"offset":2600}}}],"position":{"start":{"line":59,"column":1,"offset":2537},"end":{"line":60,"column":1,"offset":2601}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">SOCK_DGRAM</code>","position":{"start":{"line":61,"column":3,"offset":2604},"end":{"line":61,"column":15,"offset":2616}}},{"type":"text","value":" (数据包套接字) 表明我们用的是 UDP 协议,这样只会提供定长的,不可靠,无连接的通信.","position":{"start":{"line":61,"column":15,"offset":2616},"end":{"line":61,"column":61,"offset":2662}}}],"position":{"start":{"line":61,"column":1,"offset":2602},"end":{"line":62,"column":1,"offset":2663}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">SOCK_RAW</code>","position":{"start":{"line":63,"column":3,"offset":2666},"end":{"line":63,"column":13,"offset":2676}}},{"type":"text","value":" (原始套接字) 表明这是个原始套接字, 相对与上面两种类型, 提供了更多的功能, 实现 ping/traceruoute 等均需要创建此类套接字","position":{"start":{"line":63,"column":13,"offset":2676},"end":{"line":63,"column":86,"offset":2749}}}],"position":{"start":{"line":63,"column":3,"offset":2666},"end":{"line":63,"column":86,"offset":2749}}},{"type":"text","value":"\n"},{"type":"element","tagName":"table","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"thead","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"th","properties":{"align":null},"children":[{"type":"text","value":"网络层次","position":{"start":{"line":65,"column":10,"offset":2760},"end":{"line":65,"column":14,"offset":2764}}}],"position":{"start":{"line":65,"column":10,"offset":2760},"end":{"line":65,"column":14,"offset":2764}}},{"type":"text","value":"\n"},{"type":"element","tagName":"th","properties":{"align":null},"children":[{"type":"text","value":"Operation","position":{"start":{"line":65,"column":18,"offset":2768},"end":{"line":65,"column":27,"offset":2777}}}],"position":{"start":{"line":65,"column":18,"offset":2768},"end":{"line":65,"column":27,"offset":2777}}},{"type":"text","value":"\n"},{"type":"element","tagName":"th","properties":{"align":null},"children":[{"type":"text","value":"SOCK","position":{"start":{"line":65,"column":30,"offset":2780},"end":{"line":65,"column":34,"offset":2784}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"STREAM / SOCK","position":{"start":{"line":65,"column":35,"offset":2785},"end":{"line":65,"column":48,"offset":2798}}}],"position":{"start":{"line":65,"column":34,"offset":2784},"end":{"line":65,"column":49,"offset":2799}}},{"type":"text","value":"DGRAM","position":{"start":{"line":65,"column":49,"offset":2799},"end":{"line":65,"column":54,"offset":2804}}}],"position":{"start":{"line":65,"column":30,"offset":2780},"end":{"line":65,"column":54,"offset":2804}}},{"type":"text","value":"\n"},{"type":"element","tagName":"th","properties":{"align":null},"children":[{"type":"text","value":"SOCK_ROW","position":{"start":{"line":65,"column":57,"offset":2807},"end":{"line":65,"column":65,"offset":2815}}}],"position":{"start":{"line":65,"column":57,"offset":2807},"end":{"line":65,"column":65,"offset":2815}}},{"type":"text","value":"\n"}],"position":{"start":{"line":65,"column":5,"offset":2755},"end":{"line":65,"column":66,"offset":2816}}},{"type":"text","value":"\n"}],"position":{"start":{"line":65,"column":5,"offset":2755},"end":{"line":65,"column":66,"offset":2816}}},{"type":"text","value":"\n"},{"type":"element","tagName":"tbody","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"应用层(Application Layer)","position":{"start":{"line":67,"column":10,"offset":2907},"end":{"line":67,"column":32,"offset":2929}}}],"position":{"start":{"line":67,"column":10,"offset":2907},"end":{"line":67,"column":32,"offset":2929}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"telnet, ftp, http, dns…","position":{"start":{"line":67,"column":35,"offset":2932},"end":{"line":67,"column":60,"offset":2957}}}],"position":{"start":{"line":67,"column":35,"offset":2932},"end":{"line":67,"column":60,"offset":2957}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"√","position":{"start":{"line":67,"column":63,"offset":2960},"end":{"line":67,"column":64,"offset":2961}}}],"position":{"start":{"line":67,"column":63,"offset":2960},"end":{"line":67,"column":65,"offset":2962}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"√","position":{"start":{"line":67,"column":69,"offset":2966},"end":{"line":67,"column":70,"offset":2967}}}],"position":{"start":{"line":67,"column":69,"offset":2966},"end":{"line":67,"column":71,"offset":2968}}},{"type":"text","value":"\n"}],"position":{"start":{"line":67,"column":5,"offset":2902},"end":{"line":67,"column":73,"offset":2970}}},{"type":"text","value":"\n"},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"传输层(Transport Layer)","position":{"start":{"line":68,"column":10,"offset":2980},"end":{"line":68,"column":30,"offset":3000}}}],"position":{"start":{"line":68,"column":10,"offset":2980},"end":{"line":68,"column":30,"offset":3000}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"TCP, UDP","position":{"start":{"line":68,"column":33,"offset":3003},"end":{"line":68,"column":41,"offset":3011}}}],"position":{"start":{"line":68,"column":33,"offset":3003},"end":{"line":68,"column":41,"offset":3011}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"√(数据部分)","position":{"start":{"line":68,"column":44,"offset":3014},"end":{"line":68,"column":51,"offset":3021}}}],"position":{"start":{"line":68,"column":44,"offset":3014},"end":{"line":68,"column":51,"offset":3021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"√","position":{"start":{"line":68,"column":54,"offset":3024},"end":{"line":68,"column":55,"offset":3025}}}],"position":{"start":{"line":68,"column":54,"offset":3024},"end":{"line":68,"column":56,"offset":3026}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":5,"offset":2975},"end":{"line":68,"column":58,"offset":3028}}},{"type":"text","value":"\n"},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"网络层(Internet Layer)","position":{"start":{"line":69,"column":10,"offset":3038},"end":{"line":69,"column":29,"offset":3057}}}],"position":{"start":{"line":69,"column":10,"offset":3038},"end":{"line":69,"column":29,"offset":3057}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"IP","position":{"start":{"line":69,"column":32,"offset":3060},"end":{"line":69,"column":34,"offset":3062}}}],"position":{"start":{"line":69,"column":32,"offset":3060},"end":{"line":69,"column":35,"offset":3063}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"×","position":{"start":{"line":69,"column":39,"offset":3067},"end":{"line":69,"column":40,"offset":3068}}}],"position":{"start":{"line":69,"column":39,"offset":3067},"end":{"line":69,"column":40,"offset":3068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"√","position":{"start":{"line":69,"column":43,"offset":3071},"end":{"line":69,"column":44,"offset":3072}}}],"position":{"start":{"line":69,"column":43,"offset":3071},"end":{"line":69,"column":45,"offset":3073}}},{"type":"text","value":"\n"}],"position":{"start":{"line":69,"column":5,"offset":3033},"end":{"line":69,"column":47,"offset":3075}}},{"type":"text","value":"\n"},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"数据链路层(Data link)","position":{"start":{"line":70,"column":10,"offset":3085},"end":{"line":70,"column":26,"offset":3101}}}],"position":{"start":{"line":70,"column":10,"offset":3085},"end":{"line":70,"column":26,"offset":3101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"MAC","position":{"start":{"line":70,"column":29,"offset":3104},"end":{"line":70,"column":32,"offset":3107}}}],"position":{"start":{"line":70,"column":29,"offset":3104},"end":{"line":70,"column":32,"offset":3107}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"×","position":{"start":{"line":70,"column":36,"offset":3111},"end":{"line":70,"column":37,"offset":3112}}}],"position":{"start":{"line":70,"column":36,"offset":3111},"end":{"line":70,"column":37,"offset":3112}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"√","position":{"start":{"line":70,"column":41,"offset":3116},"end":{"line":70,"column":42,"offset":3117}}}],"position":{"start":{"line":70,"column":41,"offset":3116},"end":{"line":70,"column":43,"offset":3118}}},{"type":"text","value":"\n"}],"position":{"start":{"line":70,"column":5,"offset":3080},"end":{"line":70,"column":45,"offset":3120}}},{"type":"text","value":"\n"}],"position":{"start":{"line":67,"column":5,"offset":2902},"end":{"line":70,"column":45,"offset":3120}}},{"type":"text","value":"\n"}],"position":{"start":{"line":65,"column":5,"offset":2755},"end":{"line":70,"column":45,"offset":3120}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"  \t链路层的原始套接字可以直接用于接收和发送链路层的MAC帧，在发送时需要由调用者","position":{"start":{"line":72,"column":5,"offset":3126},"end":{"line":72,"column":47,"offset":3168}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"自行构造和封装MAC首部","position":{"start":{"line":72,"column":48,"offset":3169},"end":{"line":72,"column":60,"offset":3181}}}],"position":{"start":{"line":72,"column":47,"offset":3168},"end":{"line":72,"column":61,"offset":3182}}},{"type":"text","value":"。\n网络层的原始套接字可以直接用于接收和发送IP层的报文数据，在发送时需要","position":{"start":{"line":72,"column":61,"offset":3182},"end":{"line":73,"column":43,"offset":3226}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"自行构造IP报文头","position":{"start":{"line":73,"column":44,"offset":3227},"end":{"line":73,"column":53,"offset":3236}}}],"position":{"start":{"line":73,"column":43,"offset":3226},"end":{"line":73,"column":54,"offset":3237}}}],"position":{"start":{"line":72,"column":5,"offset":3126},"end":{"line":73,"column":54,"offset":3237}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"  \t一般的套接字只能操作传输层的数据部分的内容, 我们只能将发送的数据(buffer)传递给系统, 系统帮我们给数据加上tcp/udp头部,再加上ip头部, 再给发出去; 而使用原始套接字 需要我们自己构造每个部分, 系统只是将它发出去, 想一想, 这是不是多了好多乐趣呢 ","position":{"start":{"line":75,"column":5,"offset":3243},"end":{"line":75,"column":143,"offset":3381}}},{"type":"text","value":"^","position":{"start":{"line":75,"column":143,"offset":3381},"end":{"line":75,"column":145,"offset":3383}}},{"type":"text","value":"_","position":{"start":{"line":75,"column":145,"offset":3383},"end":{"line":75,"column":146,"offset":3384}}},{"type":"text","value":"^","position":{"start":{"line":75,"column":146,"offset":3384},"end":{"line":75,"column":148,"offset":3386}}}],"position":{"start":{"line":75,"column":5,"offset":3243},"end":{"line":75,"column":148,"offset":3386}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"  \t注: 原始套接字需要root权限, 针对具体情况使用相应套接字类型, 推荐阅读书籍 ","position":{"start":{"line":77,"column":5,"offset":3392},"end":{"line":77,"column":50,"offset":3437}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/D-lyw/ShareBook/tree/master/Network"},"children":[{"type":"text","value":"UNIX网络编程 卷1：套接字联网API","position":{"start":{"line":77,"column":51,"offset":3438},"end":{"line":77,"column":71,"offset":3458}}}],"position":{"start":{"line":77,"column":50,"offset":3437},"end":{"line":77,"column":128,"offset":3515}}}],"position":{"start":{"line":77,"column":5,"offset":3392},"end":{"line":77,"column":128,"offset":3515}}},{"type":"text","value":"\n"}],"position":{"start":{"line":63,"column":1,"offset":2664},"end":{"line":77,"column":128,"offset":3515}}},{"type":"text","value":"\n"}],"position":{"start":{"line":59,"column":1,"offset":2537},"end":{"line":77,"column":128,"offset":3515}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"protocol","position":{"start":{"line":79,"column":3,"offset":3519},"end":{"line":79,"column":11,"offset":3527}}}],"position":{"start":{"line":79,"column":1,"offset":3517},"end":{"line":79,"column":13,"offset":3529}}},{"type":"text","value":" :由于我们指定了 type,所以这个地方我们一般只要用 0 来代替就可以了, socket 为网络通讯做基本的准备. 如果我们使用的是原始套接字,这个时候系统是不知道你要发送什么类型数据结构的数据, 这时候就需要指定协议类型, 如 IPPROTO","position":{"start":{"line":79,"column":13,"offset":3529},"end":{"line":79,"column":137,"offset":3653}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"ICMP, IPPROTO","position":{"start":{"line":79,"column":138,"offset":3654},"end":{"line":79,"column":151,"offset":3667}}}],"position":{"start":{"line":79,"column":137,"offset":3653},"end":{"line":79,"column":152,"offset":3668}}},{"type":"text","value":"TCP, IPPROTO_UDP 等.","position":{"start":{"line":79,"column":152,"offset":3668},"end":{"line":79,"column":171,"offset":3687}}}],"position":{"start":{"line":79,"column":1,"offset":3517},"end":{"line":79,"column":171,"offset":3687}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Return Value","position":{"start":{"line":81,"column":3,"offset":3691},"end":{"line":81,"column":15,"offset":3703}}}],"position":{"start":{"line":81,"column":1,"offset":3689},"end":{"line":81,"column":17,"offset":3705}}},{"type":"text","value":" : 成功时返回文件描述符,失败时返回-1,看 全局变量 errno 可知道出错的详细情况","position":{"start":{"line":81,"column":17,"offset":3705},"end":{"line":81,"column":62,"offset":3750}}}],"position":{"start":{"line":81,"column":1,"offset":3689},"end":{"line":81,"column":62,"offset":3750}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 常用方式 下同</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sockfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>\"Create Socket Error<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>s\n\"<span class=\"token punctuation\">,</span> <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":83,"column":1,"offset":3752},"end":{"line":90,"column":4,"offset":3900}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"2. bind","position":{"start":{"line":92,"column":5,"offset":3906},"end":{"line":92,"column":12,"offset":3913}}}],"position":{"start":{"line":92,"column":1,"offset":3902},"end":{"line":92,"column":12,"offset":3913}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// bind - bind a name to a socket</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>my_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> addrlen<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":94,"column":1,"offset":3915},"end":{"line":100,"column":4,"offset":4065}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"sockfd","position":{"start":{"line":102,"column":3,"offset":4069},"end":{"line":102,"column":9,"offset":4075}}}],"position":{"start":{"line":102,"column":1,"offset":4067},"end":{"line":102,"column":11,"offset":4077}}},{"type":"text","value":": 是由 socket 调用返回的文件描述符.","position":{"start":{"line":102,"column":11,"offset":4077},"end":{"line":102,"column":34,"offset":4100}}}],"position":{"start":{"line":102,"column":1,"offset":4067},"end":{"line":102,"column":34,"offset":4100}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"addrlen","position":{"start":{"line":104,"column":3,"offset":4104},"end":{"line":104,"column":10,"offset":4111}}}],"position":{"start":{"line":104,"column":1,"offset":4102},"end":{"line":104,"column":12,"offset":4113}}},{"type":"text","value":": 是 sockaddr 结构的长度.","position":{"start":{"line":104,"column":12,"offset":4113},"end":{"line":104,"column":31,"offset":4132}}}],"position":{"start":{"line":104,"column":1,"offset":4102},"end":{"line":104,"column":31,"offset":4132}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"my_addr","position":{"start":{"line":106,"column":3,"offset":4136},"end":{"line":106,"column":10,"offset":4143}}}],"position":{"start":{"line":106,"column":1,"offset":4134},"end":{"line":106,"column":12,"offset":4145}}},{"type":"text","value":": 是一个指向结构体 sockaddr 的指针,它","position":{"start":{"line":106,"column":12,"offset":4145},"end":{"line":106,"column":37,"offset":4170}}},{"type":"raw","value":"<code class=\"language-text\">保存你的地址(即端口和 IP 地址) 信息</code>","position":{"start":{"line":106,"column":37,"offset":4170},"end":{"line":106,"column":60,"offset":4193}}},{"type":"text","value":"。 在<linux/socket.h>中有 sockaddr 的定义","position":{"start":{"line":106,"column":60,"offset":4193},"end":{"line":106,"column":94,"offset":4227}}}],"position":{"start":{"line":106,"column":1,"offset":4134},"end":{"line":106,"column":94,"offset":4227}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">{</span>\n        unisgned <span class=\"token keyword\">short</span> as_family<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> sa_data<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":108,"column":1,"offset":4229},"end":{"line":113,"column":4,"offset":4317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"不过由于系统的兼容性,我们一般不用这个头文件,而使用另外一个结构(struct sockaddr","position":{"start":{"line":115,"column":1,"offset":4319},"end":{"line":115,"column":49,"offset":4367}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"in) 来代替.在<linux/in.h>中有 sockaddr","position":{"start":{"line":115,"column":50,"offset":4368},"end":{"line":115,"column":82,"offset":4400}}}],"position":{"start":{"line":115,"column":49,"offset":4367},"end":{"line":115,"column":83,"offset":4401}}},{"type":"text","value":"in 的定义","position":{"start":{"line":115,"column":83,"offset":4401},"end":{"line":115,"column":89,"offset":4407}}}],"position":{"start":{"line":115,"column":1,"offset":4319},"end":{"line":115,"column":89,"offset":4407}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> sin_family<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token keyword\">int</span> sin_port<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> sin_addr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> sin_zero<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":117,"column":1,"offset":4409},"end":{"line":124,"column":4,"offset":4579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">注: 由于sockaddr数据结构与sockaddr_in数据结构的大小是相同的,指向sockaddr_in的指针可以通过强制类型转换,转换成指向sockaddr结构的指针</code>","position":{"start":{"line":126,"column":1,"offset":4581},"end":{"line":126,"column":89,"offset":4669}}}],"position":{"start":{"line":126,"column":1,"offset":4581},"end":{"line":126,"column":89,"offset":4669}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们主要使用 Internet 所以 sin","position":{"start":{"line":128,"column":1,"offset":4671},"end":{"line":128,"column":23,"offset":4693}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"family 一般为 AF","position":{"start":{"line":128,"column":24,"offset":4694},"end":{"line":128,"column":37,"offset":4707}}}],"position":{"start":{"line":128,"column":23,"offset":4693},"end":{"line":128,"column":38,"offset":4708}}},{"type":"text","value":"INET,","position":{"start":{"line":128,"column":38,"offset":4708},"end":{"line":128,"column":43,"offset":4713}}}],"position":{"start":{"line":128,"column":1,"offset":4671},"end":{"line":128,"column":43,"offset":4713}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"sin","position":{"start":{"line":130,"column":1,"offset":4715},"end":{"line":130,"column":4,"offset":4718}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"addr.s","position":{"start":{"line":130,"column":5,"offset":4719},"end":{"line":130,"column":11,"offset":4725}}}],"position":{"start":{"line":130,"column":4,"offset":4718},"end":{"line":130,"column":12,"offset":4726}}},{"type":"text","value":"addr 设置为 INADDR_ANY 表示自动填上所运行的机器的 ip 地址,","position":{"start":{"line":130,"column":12,"offset":4726},"end":{"line":130,"column":52,"offset":4766}}}],"position":{"start":{"line":130,"column":1,"offset":4715},"end":{"line":130,"column":52,"offset":4766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"sin_port 是我们要监听的端口号, 赋值 0 则告诉系统自动选择端口","position":{"start":{"line":132,"column":1,"offset":4768},"end":{"line":132,"column":38,"offset":4805}}}],"position":{"start":{"line":132,"column":1,"offset":4768},"end":{"line":132,"column":38,"offset":4805}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"sin_zero","position":{"start":{"line":134,"column":1,"offset":4807},"end":{"line":134,"column":9,"offset":4815}}},{"type":"text","value":"[8]","position":{"start":{"line":134,"column":10,"offset":4816},"end":{"line":134,"column":11,"offset":4817}}},{"type":"text","value":"是用来填充的","position":{"start":{"line":134,"column":12,"offset":4818},"end":{"line":134,"column":18,"offset":4824}}}],"position":{"start":{"line":134,"column":1,"offset":4807},"end":{"line":134,"column":18,"offset":4824}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"￼","position":{"start":{"line":136,"column":1,"offset":4826},"end":{"line":136,"column":2,"offset":4827}}},{"type":"element","tagName":"img","properties":{"src":"https://img-blog.csdnimg.cn/20181201114819149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTU4Mjg1,size_16,color_FFFFFF,t_70","alt":"在这里插入图片描述"},"children":[],"position":{"start":{"line":136,"column":2,"offset":4827},"end":{"line":136,"column":206,"offset":5031}}}],"position":{"start":{"line":136,"column":1,"offset":4826},"end":{"line":136,"column":206,"offset":5031}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"bind 将本地的端口同 socket 返回的文件描述符捆绑在一起.成功是返回 0,失败的情况和 socket 一样\n简单例子:","position":{"start":{"line":138,"column":1,"offset":5033},"end":{"line":139,"column":6,"offset":5097}}}],"position":{"start":{"line":138,"column":1,"offset":5033},"end":{"line":139,"column":6,"offset":5097}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _INT_PORT 9257</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 定义套接字</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> my_addr<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 定义存储本地地址信息的结构体</span>\n\tsockfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>PF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t               \t<span class=\"token comment\">// 创建套接字</span>\n\n\tmy_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\tmy_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>_INT_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmy_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"132.241.5.10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>my_addr<span class=\"token punctuation\">.</span>sin_zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>my_addr<span class=\"token punctuation\">.</span>sin_zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>my_addr<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\t<span class=\"token comment\">// 绑定套接字</span>\n\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bind socket error, %s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":141,"column":1,"offset":5099},"end":{"line":164,"column":4,"offset":5731}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"这个过程就是指定程序绑定到系统的某一个端口, 试想一下, 这个","position":{"start":{"line":166,"column":2,"offset":5734},"end":{"line":166,"column":33,"offset":5765}}},{"type":"raw","value":"<code class=\"language-text\">bind</code>","position":{"start":{"line":166,"column":33,"offset":5765},"end":{"line":166,"column":39,"offset":5771}}},{"type":"text","value":"过程 是不是必须的呢?","position":{"start":{"line":166,"column":39,"offset":5771},"end":{"line":166,"column":50,"offset":5782}}}],"position":{"start":{"line":166,"column":1,"offset":5733},"end":{"line":166,"column":51,"offset":5783}}}],"position":{"start":{"line":166,"column":1,"offset":5733},"end":{"line":166,"column":51,"offset":5783}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"3. listen","position":{"start":{"line":168,"column":5,"offset":5789},"end":{"line":168,"column":14,"offset":5798}}}],"position":{"start":{"line":168,"column":1,"offset":5785},"end":{"line":168,"column":14,"offset":5798}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// listen - listen for connections on a socket</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> backlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":170,"column":1,"offset":5800},"end":{"line":176,"column":4,"offset":5940}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"sockfd:是 bind 后的文件描述符.","position":{"start":{"line":178,"column":1,"offset":5942},"end":{"line":178,"column":23,"offset":5964}}}],"position":{"start":{"line":178,"column":1,"offset":5942},"end":{"line":178,"column":23,"offset":5964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"backlog:设置请求排队的最大长度.当有多个客户端程序和服务端相连时, 使用这个表示可以连接的最大长度.","position":{"start":{"line":180,"column":1,"offset":5966},"end":{"line":180,"column":55,"offset":6020}}}],"position":{"start":{"line":180,"column":1,"offset":5966},"end":{"line":180,"column":55,"offset":6020}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"listen 函数将 bind 的文件描述符变为监听套接字.返回的情况和 bind 一样.在发生错误的时候返回-1,并设置全局错误变量 errno","position":{"start":{"line":182,"column":1,"offset":6022},"end":{"line":182,"column":74,"offset":6095}}}],"position":{"start":{"line":182,"column":1,"offset":6022},"end":{"line":182,"column":74,"offset":6095}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以上的过程就是, 创建一个套接字, 绑定本地的地址信息, 然后在 Listen, 监听这个端口 , 等待别人来连接, 而我们用下面的 accept 来接收别人的连接","position":{"start":{"line":184,"column":1,"offset":6097},"end":{"line":184,"column":83,"offset":6179}}}],"position":{"start":{"line":184,"column":1,"offset":6097},"end":{"line":184,"column":83,"offset":6179}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"4. accept","position":{"start":{"line":186,"column":5,"offset":6185},"end":{"line":186,"column":14,"offset":6194}}}],"position":{"start":{"line":186,"column":1,"offset":6181},"end":{"line":186,"column":14,"offset":6194}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 在发生错误的时候返回-1,并设置全局错误变量 errno</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>addrlen<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":188,"column":1,"offset":6196},"end":{"line":194,"column":4,"offset":6343}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"sockfd:是 listen 后的文件描述符.","position":{"start":{"line":196,"column":1,"offset":6345},"end":{"line":196,"column":25,"offset":6369}}}],"position":{"start":{"line":196,"column":1,"offset":6345},"end":{"line":196,"column":25,"offset":6369}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"addr,addrlen 是用来给客户端的程序填写的,服务器端只要传递指针就可以了.\nbind,listen 和 accept 是服务器端用的函数,\naccept 调用时,服务器端的程序会一直阻塞到有一个客户程序发出了连接. accept 成功时返回最后的服务器端的文件描述符,这个时候服务器端可以通过该描述符进行 send() 和 recv()操作. 失败时返回-1","position":{"start":{"line":198,"column":1,"offset":6371},"end":{"line":200,"column":110,"offset":6555}}}],"position":{"start":{"line":198,"column":1,"offset":6371},"end":{"line":200,"column":110,"offset":6555}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"具体代码感受一下:","position":{"start":{"line":202,"column":1,"offset":6557},"end":{"line":202,"column":10,"offset":6566}}}],"position":{"start":{"line":202,"column":1,"offset":6557},"end":{"line":202,"column":10,"offset":6566}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SET_PORT 3490</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> new_fd<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> my_addr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> their_addr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> sin_size<span class=\"token punctuation\">;</span>\n\n\tsockfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>PF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tmy_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\tmy_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>_INT_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmy_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>my_addr<span class=\"token punctuation\">.</span>sin_zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>my_addr<span class=\"token punctuation\">.</span>sin_zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>my_addr<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \t\t<span class=\"token comment\">// 绑定套接字</span>\n\n\t<span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 监听套接字</span>\n\n\tsin_size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnew_fd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>their_addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sin_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 接收套接字</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":204,"column":1,"offset":6568},"end":{"line":230,"column":4,"offset":7210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"5. connect","position":{"start":{"line":232,"column":5,"offset":7216},"end":{"line":232,"column":15,"offset":7226}}}],"position":{"start":{"line":232,"column":1,"offset":7212},"end":{"line":232,"column":15,"offset":7226}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// connect - initiate a connection on a socket</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span> serv_addr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> addrlen<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":234,"column":1,"offset":7228},"end":{"line":240,"column":4,"offset":7396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"sockfd:socket 返回的文件描述符.","position":{"start":{"line":242,"column":1,"offset":7398},"end":{"line":242,"column":24,"offset":7421}}}],"position":{"start":{"line":242,"column":1,"offset":7398},"end":{"line":242,"column":24,"offset":7421}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"serv","position":{"start":{"line":244,"column":1,"offset":7423},"end":{"line":244,"column":5,"offset":7427}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"addr:储存了服务器端的地址信息(IP 地址, 端口号)的数据结构.其中 sin","position":{"start":{"line":244,"column":6,"offset":7428},"end":{"line":244,"column":47,"offset":7469}}}],"position":{"start":{"line":244,"column":5,"offset":7427},"end":{"line":244,"column":48,"offset":7470}}},{"type":"text","value":"add 是服务端的地址","position":{"start":{"line":244,"column":48,"offset":7470},"end":{"line":244,"column":59,"offset":7481}}}],"position":{"start":{"line":244,"column":1,"offset":7423},"end":{"line":244,"column":59,"offset":7481}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"addrlen:serv_addr 的长度 ","position":{"start":{"line":246,"column":1,"offset":7483},"end":{"line":246,"column":23,"offset":7505}}},{"type":"raw","value":"<code class=\"language-text\">sizeof(struct sockaddr)</code>","position":{"start":{"line":246,"column":23,"offset":7505},"end":{"line":246,"column":48,"offset":7530}}},{"type":"text","value":";","position":{"start":{"line":246,"column":48,"offset":7530},"end":{"line":246,"column":49,"offset":7531}}}],"position":{"start":{"line":246,"column":1,"offset":7483},"end":{"line":246,"column":49,"offset":7531}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"connect 函数是客户端用来同服务端连接的.成功时返回 0,sockfd 是同服务端通讯的文件描述符 失败时返回-1.","position":{"start":{"line":248,"column":1,"offset":7533},"end":{"line":248,"column":62,"offset":7594}}}],"position":{"start":{"line":248,"column":1,"offset":7533},"end":{"line":248,"column":62,"offset":7594}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"我们想一想,我们连接服务器,是不是只需要在套接字中提供服务器端的 ip 地址和端口号即可, 不需要指定本地的 ip 地址和端口号, 也即这个时候使用 bind()来绑定客户端的地址信息,这个操作不是必须的, 系统会自动获取本地 ip, 自动为该套接字分配端口号","position":{"start":{"line":250,"column":2,"offset":7597},"end":{"line":250,"column":132,"offset":7727}}}],"position":{"start":{"line":250,"column":1,"offset":7596},"end":{"line":250,"column":133,"offset":7728}}}],"position":{"start":{"line":250,"column":1,"offset":7596},"end":{"line":250,"column":133,"offset":7728}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"6. close & shutdown","position":{"start":{"line":252,"column":5,"offset":7734},"end":{"line":252,"column":24,"offset":7753}}}],"position":{"start":{"line":252,"column":1,"offset":7730},"end":{"line":252,"column":24,"offset":7753}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果你已经整天都在发送 (send()) 和接收 (recv()) 数据了,现在你准备关 闭你的套接字描述符了。","position":{"start":{"line":254,"column":1,"offset":7755},"end":{"line":254,"column":57,"offset":7811}}}],"position":{"start":{"line":254,"column":1,"offset":7755},"end":{"line":254,"column":57,"offset":7811}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这很简单,你可以使用一般的 Unix 文件描述符 的 close() 函数:","position":{"start":{"line":256,"column":1,"offset":7813},"end":{"line":256,"column":39,"offset":7851}}}],"position":{"start":{"line":256,"column":1,"offset":7813},"end":{"line":256,"column":39,"offset":7851}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"close(sockfd);它将防止套接字上更多的数据的读写。任何在另一端读写套接字的企图都将返回错误信息。","position":{"start":{"line":258,"column":1,"offset":7853},"end":{"line":258,"column":55,"offset":7907}}}],"position":{"start":{"line":258,"column":1,"offset":7853},"end":{"line":258,"column":55,"offset":7907}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果你想在如何关闭套接字上有多一点的控制,你可以使用函数 shutdown()。","position":{"start":{"line":260,"column":1,"offset":7909},"end":{"line":260,"column":41,"offset":7949}}}],"position":{"start":{"line":260,"column":1,"offset":7909},"end":{"line":260,"column":41,"offset":7949}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"它允许你将一定方向上的通讯或者双向的通讯(就象 close()一 样)关闭,你可以使用:\nint shutdown(int sockfd, int how);\nsockfd 是你想要关闭的套接字文件描述复。how 的值是下面的其中之 一:\n0 - 不允许接受\n1 - 不允许发送\n2 - 不允许发送和接受(和 close() 一样)\nshutdown() 成功时返回 0,失败时返回 -1(同时设置 errno。) 如果在无连接的数据报套接字中使用 shutdown(),那么只不过是让 send() 和 recv() 不能使用(记住你在数据报套接字中使用了 connect 后 是可以使用它们的)","position":{"start":{"line":262,"column":1,"offset":7951},"end":{"line":268,"column":133,"offset":8250}}}],"position":{"start":{"line":262,"column":1,"offset":7951},"end":{"line":268,"column":133,"offset":8250}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"四．相关常用函数","position":{"start":{"line":270,"column":4,"offset":8255},"end":{"line":270,"column":12,"offset":8263}}}],"position":{"start":{"line":270,"column":1,"offset":8252},"end":{"line":270,"column":12,"offset":8263}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"1. 网络字节顺序(Network Byte Order)","position":{"start":{"line":272,"column":5,"offset":8269},"end":{"line":272,"column":34,"offset":8298}}}],"position":{"start":{"line":272,"column":1,"offset":8265},"end":{"line":272,"column":34,"offset":8298}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"内存中的多字节数据相对于内存地址有大端和小端之分，磁盘文件中的多字节数据相对于文件中的偏移地址也\n有大端小端之分。网络数据流同样有大端小端之分，那么如何定义网络数据流的地址呢？发送主机通常将发送\n缓冲区中的数据按内存地址从低到高的顺序发出，接收主机把从网络上接到的字节依次保存在接收缓冲区中，\n也是按内存地址从低到高的顺序保存，因此，网络数据流的地址这样规定：先发出的数据是低地址，后发出\n的数据是高地址。","position":{"start":{"line":274,"column":1,"offset":8300},"end":{"line":278,"column":9,"offset":8503}}}],"position":{"start":{"line":274,"column":1,"offset":8300},"end":{"line":278,"column":9,"offset":8503}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tcp/Ip 协议规定, 网络传输字节顺序为高位优先,为了使网络程序具有可移植性, 需要对程序将本地字节顺序转换为网络字节顺序, 可以调用库函数做网络字节序和主机字节序(Host Byte Order)的转换, 常用函数如下:","position":{"start":{"line":280,"column":1,"offset":8505},"end":{"line":280,"column":114,"offset":8618}}}],"position":{"start":{"line":280,"column":1,"offset":8505},"end":{"line":280,"column":114,"offset":8618}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">    <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;arpa/inet.h></span></span>\n\n    uint32_t <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>uint32_l hostlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// \"Host to Network Long\"</span>\n    uint16_t <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>uint16_t hostshort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// \"Host to Network Short\"</span>\n    uint32_t <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span>uint32_t netlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// \"Network to Host Long\"</span>\n    uint16_t <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>uint16_t netshort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// \"Network to Host Short\"</span></code></pre></div>","position":{"start":{"line":282,"column":1,"offset":8620},"end":{"line":289,"column":4,"offset":8921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"问: 如果我的主机使用的就是网络字节顺序, 为什么还要调用 htonl() 转换 IP 地址呢？\n因为将你的程序移植到别人的电脑上可能会报错(","position":{"start":{"line":291,"column":3,"offset":8925},"end":{"line":292,"column":25,"offset":8998}}},{"type":"raw","value":"<code class=\"language-text\">具备可移植性</code>","position":{"start":{"line":292,"column":25,"offset":8998},"end":{"line":292,"column":33,"offset":9006}}},{"type":"text","value":"). 记住:在你将数据放到网络上的时候,确信它们是网络字节顺序的!","position":{"start":{"line":292,"column":33,"offset":9006},"end":{"line":292,"column":66,"offset":9039}}}],"position":{"start":{"line":291,"column":1,"offset":8923},"end":{"line":292,"column":66,"offset":9039}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"问: 为什么在数据结构 struct sockaddr","position":{"start":{"line":293,"column":3,"offset":9042},"end":{"line":293,"column":30,"offset":9069}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"in 中, sin","position":{"start":{"line":293,"column":31,"offset":9070},"end":{"line":293,"column":40,"offset":9079}}}],"position":{"start":{"line":293,"column":30,"offset":9069},"end":{"line":293,"column":41,"offset":9080}}},{"type":"text","value":"addr 和 sin","position":{"start":{"line":293,"column":41,"offset":9080},"end":{"line":293,"column":51,"offset":9090}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"port 需要转换为网络字节顺序,而 sin","position":{"start":{"line":293,"column":52,"offset":9091},"end":{"line":293,"column":74,"offset":9113}}}],"position":{"start":{"line":293,"column":51,"offset":9090},"end":{"line":293,"column":75,"offset":9114}}},{"type":"text","value":"family 需不需要呢?\n答案是:sin","position":{"start":{"line":293,"column":75,"offset":9114},"end":{"line":294,"column":10,"offset":9137}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"addr 和 sin","position":{"start":{"line":294,"column":11,"offset":9138},"end":{"line":294,"column":21,"offset":9148}}}],"position":{"start":{"line":294,"column":10,"offset":9137},"end":{"line":294,"column":22,"offset":9149}}},{"type":"text","value":"port 分别封装在包的 IP 和 UDP 层。因此,它们必须要 是网络字节顺序。但是 sin","position":{"start":{"line":294,"column":22,"offset":9149},"end":{"line":294,"column":69,"offset":9196}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"family 域只是被内核 (kernel) 使用来决定在数 据结构中包含什么类型的地址,所以它必须是本机字节顺序。同时, sin","position":{"start":{"line":294,"column":70,"offset":9197},"end":{"line":294,"column":135,"offset":9262}}}],"position":{"start":{"line":294,"column":69,"offset":9196},"end":{"line":294,"column":136,"offset":9263}}},{"type":"text","value":"family 没有发送到网络上,它们可以是本机字节顺序。","position":{"start":{"line":294,"column":136,"offset":9263},"end":{"line":294,"column":164,"offset":9291}}}],"position":{"start":{"line":293,"column":1,"offset":9040},"end":{"line":294,"column":164,"offset":9291}}},{"type":"text","value":"\n"}],"position":{"start":{"line":291,"column":1,"offset":8923},"end":{"line":294,"column":164,"offset":9291}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"2. Ip 地址处理转换函数","position":{"start":{"line":296,"column":5,"offset":9297},"end":{"line":296,"column":19,"offset":9311}}}],"position":{"start":{"line":296,"column":1,"offset":9293},"end":{"line":296,"column":19,"offset":9311}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们有很多的函数来方便地操作 IP 地址。没有必要用手工计算它们,也没有必要用”<<“操作来储存成长整字型．\n假如我们现在有一个 sockaddr_Ser 的地址结构体, 要将 ip 地址”103.21.187.5”保存到该结构体中, 我们可以用","position":{"start":{"line":298,"column":1,"offset":9313},"end":{"line":299,"column":69,"offset":9436}}}],"position":{"start":{"line":298,"column":1,"offset":9313},"end":{"line":299,"column":69,"offset":9436}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n\nsockaddr_Ser<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"103.21.187.5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":301,"column":1,"offset":9438},"end":{"line":307,"column":4,"offset":9576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"注意, inet_addr()返回的地址已经是网络字节格式,所以你无需再调用 函数 htonl()。","position":{"start":{"line":309,"column":1,"offset":9578},"end":{"line":309,"column":51,"offset":9628}}}],"position":{"start":{"line":309,"column":1,"offset":9578},"end":{"line":309,"column":51,"offset":9628}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"那如何讲一个长整型的 ip 地址转为点分十进制呢?","position":{"start":{"line":311,"column":1,"offset":9630},"end":{"line":311,"column":26,"offset":9655}}}],"position":{"start":{"line":311,"column":1,"offset":9630},"end":{"line":311,"column":26,"offset":9655}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>sockaddr_Clinet<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":313,"column":1,"offset":9657},"end":{"line":319,"column":4,"offset":9788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">inet_ntoa()</code>","position":{"start":{"line":321,"column":1,"offset":9790},"end":{"line":321,"column":14,"offset":9803}}},{"type":"text","value":" 含义 network to ascii .\n需要注意的是 inet","position":{"start":{"line":321,"column":14,"offset":9803},"end":{"line":322,"column":12,"offset":9837}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"ntoa()将结构体 in-addr 作为一 个参数,不是长整形\n同样需要注意的是它返回的是一个指向一个字符的指针。它是一个由 inet","position":{"start":{"line":322,"column":13,"offset":9838},"end":{"line":323,"column":36,"offset":9906}}}],"position":{"start":{"line":322,"column":12,"offset":9837},"end":{"line":323,"column":37,"offset":9907}}},{"type":"text","value":"ntoa()控制的静态的固定的指针,所以每次调用 inet_ntoa(),它就将覆盖上次调用时所得的 IP 地址","position":{"start":{"line":323,"column":37,"offset":9907},"end":{"line":323,"column":93,"offset":9963}}}],"position":{"start":{"line":321,"column":1,"offset":9790},"end":{"line":323,"column":93,"offset":9963}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"3. gethostbyname()","position":{"start":{"line":325,"column":5,"offset":9969},"end":{"line":325,"column":23,"offset":9987}}}],"position":{"start":{"line":325,"column":1,"offset":9965},"end":{"line":325,"column":23,"offset":9987}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"通过给定的名字, 找到相应的主机信息, 如给定域名,查找返回 ip 地址, 进行 bind, connect 等操作.","position":{"start":{"line":327,"column":1,"offset":9989},"end":{"line":327,"column":60,"offset":10048}}}],"position":{"start":{"line":327,"column":1,"offset":9989},"end":{"line":327,"column":60,"offset":10048}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">hostent</span> <span class=\"token operator\">*</span><span class=\"token function\">gethostbyname</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 很明白的是,它返回一个指向 struct hostent 的指针。这个数据结构 是这样的:</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">hostent</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>h_name<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 地址的正式名称</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>h_aliases<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 空字节-地址的预备名称的指针</span>\n\t<span class=\"token keyword\">int</span> h_addrtype<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 地址类型; 通常是 AF_INET</span>\n\t<span class=\"token keyword\">int</span> h_length<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 地址的比特长度</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>h_addr_list<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 零字节-主机网络地址指针。网络字节顺序</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> h_addr h_addr_list[0]</span></code></pre></div>","position":{"start":{"line":329,"column":1,"offset":10050},"end":{"line":344,"column":4,"offset":10401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"gethostbyname() 成功时返回一个指向结构体 hostent 的指针,或者 是个空 (NULL)指 针 。 ( 但 是 和 以 前 不 同 , 不 设 置 errno , h_errno 设 置 错 误 信 息 。)","position":{"start":{"line":346,"column":1,"offset":10403},"end":{"line":346,"column":115,"offset":10517}}}],"position":{"start":{"line":346,"column":1,"offset":10403},"end":{"line":346,"column":115,"offset":10517}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"参照代码例子, 加快理解:","position":{"start":{"line":348,"column":1,"offset":10519},"end":{"line":348,"column":14,"offset":10532}}}],"position":{"start":{"line":348,"column":1,"offset":10519},"end":{"line":348,"column":14,"offset":10532}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">hostent</span><span class=\"token operator\">*</span> ht<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> pptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> type<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"usage: ./filename [address] \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ht <span class=\"token operator\">=</span> <span class=\"token function\">gethostbyname</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">herror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main gethostbyname error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//打印所有信息</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host name is: %s \"</span><span class=\"token punctuation\">,</span> ht<span class=\"token operator\">-></span>h_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//打印所有的主机地址</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>pptr<span class=\"token operator\">=</span>ht<span class=\"token operator\">-></span>h_aliases<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>pptr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alias of host: %s \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host addrtype is: %d \"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> ht<span class=\"token operator\">-></span>h_addrtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host length is: %d \"</span><span class=\"token punctuation\">,</span> ht<span class=\"token operator\">-></span>h_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">==</span>AF_INET <span class=\"token operator\">||</span> type<span class=\"token operator\">==</span>AF_INET6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">char</span> ip<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>pptr <span class=\"token operator\">=</span> ht<span class=\"token operator\">-></span>h_addr_list<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>pptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">inet_ntop</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pptr<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address: %s \"</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":350,"column":1,"offset":10534},"end":{"line":387,"column":4,"offset":11405}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"五. 消息发送与接收","position":{"start":{"line":389,"column":4,"offset":11410},"end":{"line":389,"column":14,"offset":11420}}}],"position":{"start":{"line":389,"column":1,"offset":11407},"end":{"line":389,"column":14,"offset":11420}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"前面我们已经讲了如何创建,绑定, 监听, 连接套接字的操作, 可能等不及的同学已经开始想, 那怎么通过套接字发送数据呢. 这一小节我们就来讲消息发送接收的函数调用.","position":{"start":{"line":391,"column":1,"offset":11422},"end":{"line":391,"column":83,"offset":11504}}}],"position":{"start":{"line":391,"column":1,"offset":11422},"end":{"line":391,"column":83,"offset":11504}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在这之前,附上一张简单但很重要的流程图, 纵使这系列后面的内容说的再天花乱坠, 实质上也是这图上的流程. 特别是刚起步的同学, 记住这张图, 就把握了整体的流程脉络, 不至于代码无从敲起.","position":{"start":{"line":393,"column":1,"offset":11506},"end":{"line":393,"column":95,"offset":11600}}}],"position":{"start":{"line":393,"column":1,"offset":11506},"end":{"line":393,"column":95,"offset":11600}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"￼","position":{"start":{"line":395,"column":1,"offset":11602},"end":{"line":395,"column":2,"offset":11603}}},{"type":"element","tagName":"img","properties":{"src":"https://img-blog.csdnimg.cn/20181202105310984.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTU4Mjg1,size_16,color_FFFFFF,t_70","alt":"socket通信CS模式示意图"},"children":[],"position":{"start":{"line":395,"column":2,"offset":11603},"end":{"line":395,"column":212,"offset":11813}}}],"position":{"start":{"line":395,"column":1,"offset":11602},"end":{"line":395,"column":212,"offset":11813}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"1. send() 和 recv() 函数","position":{"start":{"line":397,"column":5,"offset":11819},"end":{"line":397,"column":26,"offset":11840}}}],"position":{"start":{"line":397,"column":1,"offset":11815},"end":{"line":397,"column":26,"offset":11840}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这两个函数用于流式套接字或者数据报套接字的通讯。","position":{"start":{"line":399,"column":1,"offset":11842},"end":{"line":399,"column":25,"offset":11866}}}],"position":{"start":{"line":399,"column":1,"offset":11842},"end":{"line":399,"column":25,"offset":11866}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token comment\">// send — send a message on a socket</span>\nssize_t <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// recv — receive a message from a connected socket</span>\nssize_t <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":401,"column":1,"offset":11868},"end":{"line":409,"column":4,"offset":12129}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"socket","position":{"start":{"line":411,"column":3,"offset":12133},"end":{"line":411,"column":9,"offset":12139}}}],"position":{"start":{"line":411,"column":1,"offset":12131},"end":{"line":411,"column":11,"offset":12141}}},{"type":"text","value":" 是你想发送数据的套接字描述符(或者是调用 socket() 或者是 accept() 返回的 )\n","position":{"start":{"line":411,"column":11,"offset":12141},"end":{"line":412,"column":1,"offset":12191}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"buffer","position":{"start":{"line":412,"column":3,"offset":12193},"end":{"line":412,"column":9,"offset":12199}}}],"position":{"start":{"line":412,"column":1,"offset":12191},"end":{"line":412,"column":11,"offset":12201}}},{"type":"text","value":" 是指向你想发送的数据的指针。\n","position":{"start":{"line":412,"column":11,"offset":12201},"end":{"line":413,"column":1,"offset":12217}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"length","position":{"start":{"line":413,"column":3,"offset":12219},"end":{"line":413,"column":9,"offset":12225}}}],"position":{"start":{"line":413,"column":1,"offset":12217},"end":{"line":413,"column":11,"offset":12227}}},{"type":"text","value":" 是数据的长度。\n把 flags 设置为 0 就可以了, 刚开始用不上(详细的资料请看 send() 的 man page)","position":{"start":{"line":413,"column":11,"offset":12227},"end":{"line":414,"column":54,"offset":12289}}}],"position":{"start":{"line":411,"column":1,"offset":12131},"end":{"line":414,"column":54,"offset":12289}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"send() 返回","position":{"start":{"line":416,"column":1,"offset":12291},"end":{"line":416,"column":10,"offset":12300}}},{"type":"raw","value":"<code class=\"language-text\">实际发送的数据的字节数</code>","position":{"start":{"line":416,"column":10,"offset":12300},"end":{"line":416,"column":23,"offset":12313}}},{"type":"text","value":"—它可能小于你要求发送的数 目!\n注意,有时候你告诉它要发送一堆数据可是它不能处理成功。它只是 发送它可能发送的数据,然后希望你能够发送其它的数据。记住,如果 send() 返回的数据和 len 不匹配,你就应该发送其它的数据。\n最后要说得就是,它在错误的时候返回-1,并设置 errno。","position":{"start":{"line":416,"column":23,"offset":12313},"end":{"line":418,"column":31,"offset":12459}}}],"position":{"start":{"line":416,"column":1,"offset":12291},"end":{"line":418,"column":31,"offset":12459}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"recv() 函数很类似\n","position":{"start":{"line":420,"column":1,"offset":12461},"end":{"line":421,"column":1,"offset":12474}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"socket","position":{"start":{"line":421,"column":3,"offset":12476},"end":{"line":421,"column":9,"offset":12482}}}],"position":{"start":{"line":421,"column":1,"offset":12474},"end":{"line":421,"column":11,"offset":12484}}},{"type":"text","value":" 是要读的套接字描述符。\n","position":{"start":{"line":421,"column":11,"offset":12484},"end":{"line":422,"column":1,"offset":12497}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"buffer","position":{"start":{"line":422,"column":3,"offset":12499},"end":{"line":422,"column":9,"offset":12505}}}],"position":{"start":{"line":422,"column":1,"offset":12497},"end":{"line":422,"column":11,"offset":12507}}},{"type":"text","value":" 是要读的信息的缓冲。\n","position":{"start":{"line":422,"column":11,"offset":12507},"end":{"line":423,"column":1,"offset":12519}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"length","position":{"start":{"line":423,"column":3,"offset":12521},"end":{"line":423,"column":9,"offset":12527}}}],"position":{"start":{"line":423,"column":1,"offset":12519},"end":{"line":423,"column":11,"offset":12529}}},{"type":"text","value":" 是缓 冲的最大长度。\n","position":{"start":{"line":423,"column":11,"offset":12529},"end":{"line":424,"column":1,"offset":12541}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"flags","position":{"start":{"line":424,"column":3,"offset":12543},"end":{"line":424,"column":8,"offset":12548}}}],"position":{"start":{"line":424,"column":1,"offset":12541},"end":{"line":424,"column":10,"offset":12550}}},{"type":"text","value":" 可以设置为 0。(请参考 recv() 的 man page)","position":{"start":{"line":424,"column":10,"offset":12550},"end":{"line":424,"column":42,"offset":12582}}}],"position":{"start":{"line":420,"column":1,"offset":12461},"end":{"line":424,"column":42,"offset":12582}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"recv() 返回","position":{"start":{"line":426,"column":1,"offset":12584},"end":{"line":426,"column":10,"offset":12593}}},{"type":"raw","value":"<code class=\"language-text\">实际读入缓冲的数据的字节数</code>","position":{"start":{"line":426,"column":10,"offset":12593},"end":{"line":426,"column":25,"offset":12608}}},{"type":"text","value":"。或者在错误的时候返回-1, 同时设置 errno。","position":{"start":{"line":426,"column":25,"offset":12608},"end":{"line":426,"column":51,"offset":12634}}}],"position":{"start":{"line":426,"column":1,"offset":12584},"end":{"line":426,"column":51,"offset":12634}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"2. sendto() 和 recvfrom() 函数","position":{"start":{"line":428,"column":5,"offset":12640},"end":{"line":428,"column":32,"offset":12667}}}],"position":{"start":{"line":428,"column":1,"offset":12636},"end":{"line":428,"column":32,"offset":12667}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这两个函数用于 无连接数据报套接字","position":{"start":{"line":430,"column":1,"offset":12669},"end":{"line":430,"column":18,"offset":12686}}}],"position":{"start":{"line":430,"column":1,"offset":12669},"end":{"line":430,"column":18,"offset":12686}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\nssize_t <span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span>\n\t\t   <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>dest_addr<span class=\"token punctuation\">,</span>socklen_t dest_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nssize_t <span class=\"token function\">recvfrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>restrict buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">,</span>\n           <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>restrict address<span class=\"token punctuation\">,</span>\n           socklen_t <span class=\"token operator\">*</span>restrict address_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":432,"column":1,"offset":12688},"end":{"line":442,"column":4,"offset":13024}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以看到,sendto() 函数除了另外的两个信息外,其余的和函数 send() 是一样 的。\n","position":{"start":{"line":444,"column":1,"offset":13026},"end":{"line":445,"column":1,"offset":13074}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"dest_addr","position":{"start":{"line":445,"column":3,"offset":13076},"end":{"line":445,"column":12,"offset":13085}}}],"position":{"start":{"line":445,"column":1,"offset":13074},"end":{"line":445,"column":14,"offset":13087}}},{"type":"text","value":" 是个指向数据结构 struct sockaddr 的指针,它包含了","position":{"start":{"line":445,"column":14,"offset":13087},"end":{"line":445,"column":48,"offset":13121}}},{"type":"raw","value":"<code class=\"language-text\">目的地的 IP 地址和端口信息</code>","position":{"start":{"line":445,"column":48,"offset":13121},"end":{"line":445,"column":65,"offset":13138}}},{"type":"text","value":"。\n","position":{"start":{"line":445,"column":65,"offset":13138},"end":{"line":446,"column":1,"offset":13140}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"dest_len","position":{"start":{"line":446,"column":3,"offset":13142},"end":{"line":446,"column":11,"offset":13150}}}],"position":{"start":{"line":446,"column":1,"offset":13140},"end":{"line":446,"column":13,"offset":13152}}},{"type":"text","value":" 可以简单地设置为 sizeof(struct sockaddr)。\n和函数 send() 类似, sendto() 返回实际发送的字节数(它也可能小于 你想要发送的字节数!),或者在错误的时候返回 -1。","position":{"start":{"line":446,"column":13,"offset":13152},"end":{"line":447,"column":69,"offset":13255}}}],"position":{"start":{"line":444,"column":1,"offset":13026},"end":{"line":447,"column":69,"offset":13255}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"recvfrom() 函数也是类似, 除了两个增加的参数外,这个函数和 recv() 也是一样的。\n","position":{"start":{"line":449,"column":1,"offset":13257},"end":{"line":450,"column":1,"offset":13307}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"address","position":{"start":{"line":450,"column":3,"offset":13309},"end":{"line":450,"column":10,"offset":13316}}}],"position":{"start":{"line":450,"column":1,"offset":13307},"end":{"line":450,"column":12,"offset":13318}}},{"type":"text","value":" 是一个指向局部数据结构 struct sockaddr 的指针,它的内容是","position":{"start":{"line":450,"column":12,"offset":13318},"end":{"line":450,"column":50,"offset":13356}}},{"type":"raw","value":"<code class=\"language-text\">请求连接方的 IP 地址和端口信息</code>","position":{"start":{"line":450,"column":50,"offset":13356},"end":{"line":450,"column":69,"offset":13375}}},{"type":"text","value":"。\n","position":{"start":{"line":450,"column":69,"offset":13375},"end":{"line":451,"column":1,"offset":13377}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"address_len","position":{"start":{"line":451,"column":3,"offset":13379},"end":{"line":451,"column":14,"offset":13390}}}],"position":{"start":{"line":451,"column":1,"offset":13377},"end":{"line":451,"column":16,"offset":13392}}},{"type":"text","value":" 是个 int 型的局部指针,它的初始值为 sizeof(struct sockaddr)。\n函数调用返回后, address_len 保存着实际储存在 address 中的地址的长度。\nrecvfrom() 返回收到的字节长度,或者在发生错误后返回 -1。","position":{"start":{"line":451,"column":16,"offset":13392},"end":{"line":453,"column":36,"offset":13521}}}],"position":{"start":{"line":449,"column":1,"offset":13257},"end":{"line":453,"column":36,"offset":13521}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"问: 为什么 udp 连接的套接字函数(sendto, recvfrom) 相比与 tcp 的通信的套接字,要提供更多的参数呢?\n答: 这是因为 tcp 是面向连接的协议,在双方通信之前,是已经建立好了连接, 直接 send 数据, 便可发到连接另一端的消息接收方;\n而 udp 是无连接的协议, 通信之间没有建立连接, 所以在发送消息时, 必须指明消息接收方的地址信息(IP 地址及端口号), 才能将消息发送给对方.","position":{"start":{"line":455,"column":1,"offset":13523},"end":{"line":457,"column":76,"offset":13732}}}],"position":{"start":{"line":455,"column":1,"offset":13523},"end":{"line":457,"column":76,"offset":13732}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"注: 如果你用 connect() 连接一个数据报套接字,你可以简单的调 用 send() 和 recv() 来满足你的要求。这个时候依然是数据报套接字,依 然使用 UDP,系统套接字接口会为你自动加上了目标和源的信息","position":{"start":{"line":459,"column":1,"offset":13734},"end":{"line":459,"column":110,"offset":13843}}}],"position":{"start":{"line":459,"column":1,"offset":13734},"end":{"line":459,"column":110,"offset":13843}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原来是不想贴代码的, 但怕有些人看完上面的内容,急不可耐的向感受一下, 还是给附上一个最简单的 demo:\n更多代码移步我 github: ","position":{"start":{"line":461,"column":1,"offset":13845},"end":{"line":462,"column":17,"offset":13915}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/D-lyw/Socket_C_linux"},"children":[{"type":"text","value":"https://github.com/D-lyw/Socket_C_linux","position":{"start":{"line":462,"column":17,"offset":13915},"end":{"line":462,"column":56,"offset":13954}}}],"position":{"start":{"line":462,"column":17,"offset":13915},"end":{"line":462,"column":56,"offset":13954}}},{"type":"text","value":" 查看相关代码: ","position":{"start":{"line":462,"column":56,"offset":13954},"end":{"line":462,"column":65,"offset":13963}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/D-lyw/Socket_C_linux"},"children":[{"type":"text","value":"tcp, udp, ping, tracert, dns, ftp…","position":{"start":{"line":462,"column":66,"offset":13964},"end":{"line":462,"column":104,"offset":14002}}}],"position":{"start":{"line":462,"column":65,"offset":13963},"end":{"line":462,"column":146,"offset":14044}}}],"position":{"start":{"line":461,"column":1,"offset":13845},"end":{"line":462,"column":146,"offset":14044}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"tcp_server.c","position":{"start":{"line":464,"column":1,"offset":14046},"end":{"line":464,"column":13,"offset":14058}}}],"position":{"start":{"line":464,"column":1,"offset":14046},"end":{"line":464,"column":13,"offset":14058}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\n * @Author: D-lyw\n * @Date: 2018-10-25 00:48:44\n * @Last Modified by: D-lyw\n * @Last Modified time: 2018-11-16 12:29:37\n */</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERVADDR_PORT 8800</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>LOCALIP <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 定义变量存储生成或接收的套接字描述符</span>\n    <span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">,</span> recvfd<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 定义一个数据结构用来存储套接字的协议,ip,端口等地址结构信息</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> servaddr<span class=\"token punctuation\">,</span> clientaddr<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 定义接收的套接字的数据结构的大小</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> cliaddr_len<span class=\"token punctuation\">,</span> recvLen<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> recvBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//创建用于帧听的套接字</span>\n    listenfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 给套接字数据结构赋值,指定ip地址和端口号</span>\n    servaddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n    servaddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>SERVADDR_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    servaddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>LOCALIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 绑定套接字</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>servaddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>servaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"绑定套接字失败,%s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 监听请求</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"绑定套接字失败,%s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cliaddr_len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 等待连接请求</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 接受由客户机进程调用connet函数发出的连接请求</span>\n        recvfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>clientaddr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cliaddr_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到请求套接字描述符: %d \"</span><span class=\"token punctuation\">,</span> recvfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 在已建立连接的套接字上接收数据</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>recvLen <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>recvfd<span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"接收数据错误, %s \"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>recvfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":466,"column":1,"offset":14060},"end":{"line":537,"column":4,"offset":15765}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"tcp_client.c","position":{"start":{"line":539,"column":1,"offset":15767},"end":{"line":539,"column":13,"offset":15779}}}],"position":{"start":{"line":539,"column":1,"offset":15767},"end":{"line":539,"column":13,"offset":15779}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\n * @Author: D-lyw\n * @Date: 2018-10-26 14:06:32\n * @Last Modified by: D-lyw\n * @Last Modified time: 2018-11-16 12:34:08\n * @name tcp_client.c\n * @descripe    实现最基本的创建套接字, 填充客户端信息,connet连接服务端, 可连续向服务端发送消息\n */</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> errno<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERVERPORT 8800</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 定义变量存储本地套接字描述符</span>\n    <span class=\"token keyword\">int</span> clifd<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 设置本地ip地址</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> serverIp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 定义套接字结构存储套接字的ip,port等信息</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cliaddr_in<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 定义发送,接收缓冲区大小</span>\n    <span class=\"token keyword\">char</span> sendBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 创建套接字</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>clifd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"创建套接字失败,%s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 填充 服务器端结构体信息</span>\n    cliaddr_in<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n    cliaddr_in<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>serverIp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cliaddr_in<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>SERVERPORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 请求连接服务器进程</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>clifd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>cliaddr_in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"请求连接服务器失败, %s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hi,hi, severs!  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 发送打招呼消息</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>clifd<span class=\"token punctuation\">,</span> sendBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"send message error:(, %s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 阻塞等待输入,发送消息</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>clifd<span class=\"token punctuation\">,</span> sendBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"send message error:(, %s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>clifd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":541,"column":1,"offset":15781},"end":{"line":608,"column":4,"offset":17463}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":610,"column":1,"offset":17465},"end":{"line":610,"column":4,"offset":17468}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"终于写完了, 如果觉得写的还可以,请点个赞 :）．．．\n这是 Linux 网络编程系列的第一篇文章, 感兴趣的同学, 可浏览该系列的其他文章","position":{"start":{"line":612,"column":1,"offset":17470},"end":{"line":613,"column":43,"offset":17540}}}],"position":{"start":{"line":612,"column":1,"offset":17470},"end":{"line":613,"column":43,"offset":17540}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://blog.csdn.net/qq_36958285/article/details/84675689"},"children":[{"type":"text","value":"Linux 网络编程篇之 ICMP 协议分析及 ping 程序实现","position":{"start":{"line":615,"column":4,"offset":17545},"end":{"line":615,"column":37,"offset":17578}}}],"position":{"start":{"line":615,"column":3,"offset":17544},"end":{"line":615,"column":98,"offset":17639}}}],"position":{"start":{"line":615,"column":1,"offset":17542},"end":{"line":615,"column":98,"offset":17639}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://blog.csdn.net/qq_36958285/article/details/84671973"},"children":[{"type":"text","value":"Linux 网络编程之 TCP 及聊天室功能实现","position":{"start":{"line":616,"column":4,"offset":17643},"end":{"line":616,"column":28,"offset":17667}}}],"position":{"start":{"line":616,"column":3,"offset":17642},"end":{"line":616,"column":89,"offset":17728}}}],"position":{"start":{"line":616,"column":1,"offset":17640},"end":{"line":616,"column":89,"offset":17728}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"未完待续…","position":{"start":{"line":617,"column":3,"offset":17731},"end":{"line":617,"column":10,"offset":17738}}}],"position":{"start":{"line":617,"column":1,"offset":17729},"end":{"line":617,"column":10,"offset":17738}}},{"type":"text","value":"\n"}],"position":{"start":{"line":615,"column":1,"offset":17542},"end":{"line":617,"column":10,"offset":17738}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":618,"column":1,"offset":17739}}}}