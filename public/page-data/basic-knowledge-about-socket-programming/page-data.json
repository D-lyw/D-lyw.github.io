{"componentChunkName":"component---src-templates-blog-post-js","path":"/basic-knowledge-about-socket-programming/","result":{"data":{"site":{"siteMetadata":{"title":"D-lyw' Blog"}},"markdownRemark":{"id":"4eee8198-58fb-5232-a9d0-eb0935d93e82","excerpt":"Linux 系统的一大特点是它的网络编程能力十分强大, 学习它, 让我们真正体会网络的魅力! 一. 客户机/服务器模型 网络应用程序一般是以 c/s 模型的方式工作的,因特网便是 c/s 模型的一个典型例子,在这种工作方式中,一个服务器通常事先启动,并在一个熟知端口帧听对服务器的请求,如 ftp 服务器,web…","html":"<blockquote>\n<p>Linux 系统的一大特点是它的网络编程能力十分强大, 学习它, 让我们真正体会网络的魅力!</p>\n</blockquote>\n<h2>一. 客户机/服务器模型</h2>\n<p>网络应用程序一般是以 c/s 模型的方式工作的,因特网便是 c/s 模型的一个典型例子,在这种工作方式中,一个服务器通常事先启动,并在一个熟知端口帧听对服务器的请求,如 ftp 服务器,web 服务器等.当客户机应用程序需要某种服务时,需向提供这个服务的服务器发出请求,服务器收到请求后,向客户机发出相应请求服务.这样客户机应用程序和服务器程序之间就建立了通信连接,此后便可以进行数据通信,通信任务完成后,需要关闭它们之间的通信连接.</p>\n<p>￼<img src=\"https://img-blog.csdnimg.cn/2018120111460362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTU4Mjg1,size_16,color_FFFFFF,t_70\" alt=\"C_S_chart_flow\"></p>\n<h2>二. 网络套接字(socket)介绍</h2>\n<p>在网路中要全局的标示一个参与通信的进程,需要采用三元组:　<strong><em>协议，主机 ip 地址,端口号</em></strong>.\n要描述两个应用进程之间的端到端的通信则需要一个五元组: <strong><em>协议,信源机 ip 地址,信源应用进程端口, 信宿机 ip 地址,信宿应用进程端口</em></strong>.\n那么从程序设计的角度如何实现两个应用进程的通信连接的建立,并如何实现两个进程指佳酿数据传输呢?人们引入套接字(Socket)的概念.</p>\n<p>￼<img src=\"https://img-blog.csdnimg.cn/20181201114726459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTU4Mjg1,size_16,color_FFFFFF,t_70\" alt=\"Socket_flow\"></p>\n<ul>\n<li>套接字实现了对网络和传输层协议的封装</li>\n<li>套接字可以看做是处于不同主机之间的两个进程的通信连接端点</li>\n<li>在实现两个进程间的通信时, 首先应用进程各自创建自己的套接字,然后通过套接字建立双方的通信链路,进而利用各自的套接字进行数据的发送个接收</li>\n</ul>\n<p>socket 这个词可以表示很多概念：</p>\n<ul>\n<li>在 TCP/IP 协议中，“IP 地址+TCP 或 UDP 端口号”唯一标识网络通讯中的一个进程，“IP 地址+端口号”就称为 socket。</li>\n<li>在 TCP 协议中，建立连接的两个进程各自有一个 socket 来标识，那么这两个 socket 组成的 socket pair 就唯一标识一个连接。socket 本身有“插座”的意思，因此用来<code class=\"language-text\">描述网络连接的一对一关系</code>。</li>\n<li>TCP/IP 协议最早在 BSD UNIX 上实现，为 TCP/IP 协议设计的应用层编程接口称为 socket API</li>\n</ul>\n<p>Socket 进一步介绍:\n<code class=\"language-text\">socket是使用标准unix文件描述符(file descriptor)和其他程序通讯的方式</code>. Unix 中的一切都是文件,接触过 Unix/Linux,就一定会听过这句话. 实际上, unix 程序在执行任何形式的 I/O 时,程序都是在读或者写一个文件描述符. 一个文件描述符只是一个跟打开的文件相关联的整数, 这个文件可能是一个网络连接, FIFO, 管道, 终端, 文件或者什么其他东西. 所以你要和网络上的其他程序通信时,你就要用到文件描述符, 那怎么得到网络通信的文件描述符呢?\n利用系统调用 socket(),它会返回套接字描述符(socket descriptor), 然后就可以用它来 send(), recv() ,发送接收数据.</p>\n<h2>三. 套接字编程基础</h2>\n<blockquote>\n<p>Tcp/Ip 的核心内容被封装在操作系统中,网络应用程序要使用 Tcp/Ip 来实现自己的功能,需要通过操作系统提供给用户的编程接口来实现. 套接字就是 Tcp/Ip 网络编程接口的集合,他是应用程序 Tcp/Ip 协议族通信的中间软件抽象层.</p>\n</blockquote>\n<h3>1. socket</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// socket - create an endpoint for communication</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> domain<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> protocol<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// DESCRIPTION</span>\n<span class=\"token comment\">//       socket() creates an endpoint for communication and returns a file descriptor that</span>\n<span class=\"token comment\">//       refers to that endpoint.  The file descriptor returned by a successful call will</span>\n<span class=\"token comment\">//       be the lowest-numbered file descrip‐tor not currently open for the process.</span></code></pre></div>\n<p><strong>domain</strong>: 说明我们网络程序所在的主机采用的通讯协族(AF<em>UNIX 和 AF<em>INET 等). AF</em>UNIX 只能够用于单一的 Unix 系统进程间通信,而 AF_INET 是针对 Internet 的,因而可以允许在远程主机之间通信(当我们 man socket 时发现 domain 可选项是 PF</em>_而不是 AF__,因为 glibc 是 posix 的实现 所以用 PF 代替了 AF,不过我们都可以使用的).</p>\n<p><strong>type</strong>: 指网络程序所采用的通讯协议(SOCK<em>STREAM,SOCK</em>DGRAM 等)</p>\n<ul>\n<li><code class=\"language-text\">SOCK_STREAM</code> (流套接字) 表明我们用的是 TCP 协议,这样会提供按顺序的,可靠,双向,面向连接的比特流.</li>\n<li><code class=\"language-text\">SOCK_DGRAM</code> (数据包套接字) 表明我们用的是 UDP 协议,这样只会提供定长的,不可靠,无连接的通信.</li>\n<li>\n<p><code class=\"language-text\">SOCK_RAW</code> (原始套接字) 表明这是个原始套接字, 相对与上面两种类型, 提供了更多的功能, 实现 ping/traceruoute 等均需要创建此类套接字</p>\n<table>\n<thead>\n<tr>\n<th>网络层次</th>\n<th>Operation</th>\n<th>SOCK<em>STREAM / SOCK</em>DGRAM</th>\n<th>SOCK_ROW</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层(Application Layer)</td>\n<td>telnet, ftp, http, dns…</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>传输层(Transport Layer)</td>\n<td>TCP, UDP</td>\n<td>√(数据部分)</td>\n<td>√</td>\n</tr>\n<tr>\n<td>网络层(Internet Layer)</td>\n<td>IP</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>数据链路层(Data link)</td>\n<td>MAC</td>\n<td>×</td>\n<td>√</td>\n</tr>\n</tbody>\n</table>\n<p>  \t链路层的原始套接字可以直接用于接收和发送链路层的MAC帧，在发送时需要由调用者<em>自行构造和封装MAC首部</em>。\n网络层的原始套接字可以直接用于接收和发送IP层的报文数据，在发送时需要<em>自行构造IP报文头</em></p>\n<p>  \t一般的套接字只能操作传输层的数据部分的内容, 我们只能将发送的数据(buffer)传递给系统, 系统帮我们给数据加上tcp/udp头部,再加上ip头部, 再给发出去; 而使用原始套接字 需要我们自己构造每个部分, 系统只是将它发出去, 想一想, 这是不是多了好多乐趣呢 ^_^</p>\n<p>  \t注: 原始套接字需要root权限, 针对具体情况使用相应套接字类型, 推荐阅读书籍 <a href=\"https://github.com/D-lyw/ShareBook/tree/master/Network\">UNIX网络编程 卷1：套接字联网API</a></p>\n</li>\n</ul>\n<p><strong>protocol</strong> :由于我们指定了 type,所以这个地方我们一般只要用 0 来代替就可以了, socket 为网络通讯做基本的准备. 如果我们使用的是原始套接字,这个时候系统是不知道你要发送什么类型数据结构的数据, 这时候就需要指定协议类型, 如 IPPROTO<em>ICMP, IPPROTO</em>TCP, IPPROTO_UDP 等.</p>\n<p><strong>Return Value</strong> : 成功时返回文件描述符,失败时返回-1,看 全局变量 errno 可知道出错的详细情况</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 常用方式 下同</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sockfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>\"Create Socket Error<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>s\n\"<span class=\"token punctuation\">,</span> <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. bind</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// bind - bind a name to a socket</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>my_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> addrlen<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>sockfd</strong>: 是由 socket 调用返回的文件描述符.</p>\n<p><strong>addrlen</strong>: 是 sockaddr 结构的长度.</p>\n<p><strong>my_addr</strong>: 是一个指向结构体 sockaddr 的指针,它<code class=\"language-text\">保存你的地址(即端口和 IP 地址) 信息</code>。 在&#x3C;linux/socket.h>中有 sockaddr 的定义</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">{</span>\n        unisgned <span class=\"token keyword\">short</span> as_family<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> sa_data<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不过由于系统的兼容性,我们一般不用这个头文件,而使用另外一个结构(struct sockaddr<em>in) 来代替.在&#x3C;linux/in.h>中有 sockaddr</em>in 的定义</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> sin_family<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token keyword\">int</span> sin_port<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> sin_addr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> sin_zero<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">注: 由于sockaddr数据结构与sockaddr_in数据结构的大小是相同的,指向sockaddr_in的指针可以通过强制类型转换,转换成指向sockaddr结构的指针</code></p>\n<p>我们主要使用 Internet 所以 sin<em>family 一般为 AF</em>INET,</p>\n<p>sin<em>addr.s</em>addr 设置为 INADDR_ANY 表示自动填上所运行的机器的 ip 地址,</p>\n<p>sin_port 是我们要监听的端口号, 赋值 0 则告诉系统自动选择端口</p>\n<p>sin_zero[8]是用来填充的</p>\n<p>￼<img src=\"https://img-blog.csdnimg.cn/20181201114819149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTU4Mjg1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>bind 将本地的端口同 socket 返回的文件描述符捆绑在一起.成功是返回 0,失败的情况和 socket 一样\n简单例子:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _INT_PORT 9257</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 定义套接字</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> my_addr<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 定义存储本地地址信息的结构体</span>\n\tsockfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>PF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t               \t<span class=\"token comment\">// 创建套接字</span>\n\n\tmy_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\tmy_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>_INT_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmy_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"132.241.5.10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>my_addr<span class=\"token punctuation\">.</span>sin_zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>my_addr<span class=\"token punctuation\">.</span>sin_zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>my_addr<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\t<span class=\"token comment\">// 绑定套接字</span>\n\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bind socket error, %s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>这个过程就是指定程序绑定到系统的某一个端口, 试想一下, 这个<code class=\"language-text\">bind</code>过程 是不是必须的呢?</em></p>\n<h3>3. listen</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// listen - listen for connections on a socket</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> backlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>sockfd:是 bind 后的文件描述符.</p>\n<p>backlog:设置请求排队的最大长度.当有多个客户端程序和服务端相连时, 使用这个表示可以连接的最大长度.</p>\n<p>listen 函数将 bind 的文件描述符变为监听套接字.返回的情况和 bind 一样.在发生错误的时候返回-1,并设置全局错误变量 errno</p>\n<p>以上的过程就是, 创建一个套接字, 绑定本地的地址信息, 然后在 Listen, 监听这个端口 , 等待别人来连接, 而我们用下面的 accept 来接收别人的连接</p>\n<h3>4. accept</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 在发生错误的时候返回-1,并设置全局错误变量 errno</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>addrlen<span class=\"token punctuation\">)</span></code></pre></div>\n<p>sockfd:是 listen 后的文件描述符.</p>\n<p>addr,addrlen 是用来给客户端的程序填写的,服务器端只要传递指针就可以了.\nbind,listen 和 accept 是服务器端用的函数,\naccept 调用时,服务器端的程序会一直阻塞到有一个客户程序发出了连接. accept 成功时返回最后的服务器端的文件描述符,这个时候服务器端可以通过该描述符进行 send() 和 recv()操作. 失败时返回-1</p>\n<p>具体代码感受一下:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SET_PORT 3490</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> new_fd<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> my_addr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> their_addr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> sin_size<span class=\"token punctuation\">;</span>\n\n\tsockfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>PF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tmy_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\tmy_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>_INT_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmy_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>my_addr<span class=\"token punctuation\">.</span>sin_zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>my_addr<span class=\"token punctuation\">.</span>sin_zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>my_addr<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \t\t<span class=\"token comment\">// 绑定套接字</span>\n\n\t<span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 监听套接字</span>\n\n\tsin_size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnew_fd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>sockfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>their_addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sin_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 接收套接字</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>5. connect</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// connect - initiate a connection on a socket</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span> serv_addr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> addrlen<span class=\"token punctuation\">)</span></code></pre></div>\n<p>sockfd:socket 返回的文件描述符.</p>\n<p>serv<em>addr:储存了服务器端的地址信息(IP 地址, 端口号)的数据结构.其中 sin</em>add 是服务端的地址</p>\n<p>addrlen:serv_addr 的长度 <code class=\"language-text\">sizeof(struct sockaddr)</code>;</p>\n<p>connect 函数是客户端用来同服务端连接的.成功时返回 0,sockfd 是同服务端通讯的文件描述符 失败时返回-1.</p>\n<p><em>我们想一想,我们连接服务器,是不是只需要在套接字中提供服务器端的 ip 地址和端口号即可, 不需要指定本地的 ip 地址和端口号, 也即这个时候使用 bind()来绑定客户端的地址信息,这个操作不是必须的, 系统会自动获取本地 ip, 自动为该套接字分配端口号</em></p>\n<h3>6. close &#x26; shutdown</h3>\n<p>如果你已经整天都在发送 (send()) 和接收 (recv()) 数据了,现在你准备关 闭你的套接字描述符了。</p>\n<p>这很简单,你可以使用一般的 Unix 文件描述符 的 close() 函数:</p>\n<p>close(sockfd);它将防止套接字上更多的数据的读写。任何在另一端读写套接字的企图都将返回错误信息。</p>\n<p>如果你想在如何关闭套接字上有多一点的控制,你可以使用函数 shutdown()。</p>\n<p>它允许你将一定方向上的通讯或者双向的通讯(就象 close()一 样)关闭,你可以使用:\nint shutdown(int sockfd, int how);\nsockfd 是你想要关闭的套接字文件描述复。how 的值是下面的其中之 一:\n0 - 不允许接受\n1 - 不允许发送\n2 - 不允许发送和接受(和 close() 一样)\nshutdown() 成功时返回 0,失败时返回 -1(同时设置 errno。) 如果在无连接的数据报套接字中使用 shutdown(),那么只不过是让 send() 和 recv() 不能使用(记住你在数据报套接字中使用了 connect 后 是可以使用它们的)</p>\n<h2>四．相关常用函数</h2>\n<h3>1. 网络字节顺序(Network Byte Order)</h3>\n<p>内存中的多字节数据相对于内存地址有大端和小端之分，磁盘文件中的多字节数据相对于文件中的偏移地址也\n有大端小端之分。网络数据流同样有大端小端之分，那么如何定义网络数据流的地址呢？发送主机通常将发送\n缓冲区中的数据按内存地址从低到高的顺序发出，接收主机把从网络上接到的字节依次保存在接收缓冲区中，\n也是按内存地址从低到高的顺序保存，因此，网络数据流的地址这样规定：先发出的数据是低地址，后发出\n的数据是高地址。</p>\n<p>Tcp/Ip 协议规定, 网络传输字节顺序为高位优先,为了使网络程序具有可移植性, 需要对程序将本地字节顺序转换为网络字节顺序, 可以调用库函数做网络字节序和主机字节序(Host Byte Order)的转换, 常用函数如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">    <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;arpa/inet.h></span></span>\n\n    uint32_t <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>uint32_l hostlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// \"Host to Network Long\"</span>\n    uint16_t <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>uint16_t hostshort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// \"Host to Network Short\"</span>\n    uint32_t <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span>uint32_t netlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// \"Network to Host Long\"</span>\n    uint16_t <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>uint16_t netshort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// \"Network to Host Short\"</span></code></pre></div>\n<ul>\n<li>问: 如果我的主机使用的就是网络字节顺序, 为什么还要调用 htonl() 转换 IP 地址呢？\n因为将你的程序移植到别人的电脑上可能会报错(<code class=\"language-text\">具备可移植性</code>). 记住:在你将数据放到网络上的时候,确信它们是网络字节顺序的!</li>\n<li>问: 为什么在数据结构 struct sockaddr<em>in 中, sin</em>addr 和 sin<em>port 需要转换为网络字节顺序,而 sin</em>family 需不需要呢?\n答案是:sin<em>addr 和 sin</em>port 分别封装在包的 IP 和 UDP 层。因此,它们必须要 是网络字节顺序。但是 sin<em>family 域只是被内核 (kernel) 使用来决定在数 据结构中包含什么类型的地址,所以它必须是本机字节顺序。同时, sin</em>family 没有发送到网络上,它们可以是本机字节顺序。</li>\n</ul>\n<h3>2. Ip 地址处理转换函数</h3>\n<p>我们有很多的函数来方便地操作 IP 地址。没有必要用手工计算它们,也没有必要用”&#x3C;&#x3C;“操作来储存成长整字型．\n假如我们现在有一个 sockaddr_Ser 的地址结构体, 要将 ip 地址”103.21.187.5”保存到该结构体中, 我们可以用</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n\nsockaddr_Ser<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"103.21.187.5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意, inet_addr()返回的地址已经是网络字节格式,所以你无需再调用 函数 htonl()。</p>\n<p>那如何讲一个长整型的 ip 地址转为点分十进制呢?</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>sockaddr_Clinet<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">inet_ntoa()</code> 含义 network to ascii .\n需要注意的是 inet<em>ntoa()将结构体 in-addr 作为一 个参数,不是长整形\n同样需要注意的是它返回的是一个指向一个字符的指针。它是一个由 inet</em>ntoa()控制的静态的固定的指针,所以每次调用 inet_ntoa(),它就将覆盖上次调用时所得的 IP 地址</p>\n<h3>3. gethostbyname()</h3>\n<p>通过给定的名字, 找到相应的主机信息, 如给定域名,查找返回 ip 地址, 进行 bind, connect 等操作.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">hostent</span> <span class=\"token operator\">*</span><span class=\"token function\">gethostbyname</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 很明白的是,它返回一个指向 struct hostent 的指针。这个数据结构 是这样的:</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">hostent</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>h_name<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 地址的正式名称</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>h_aliases<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 空字节-地址的预备名称的指针</span>\n\t<span class=\"token keyword\">int</span> h_addrtype<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 地址类型; 通常是 AF_INET</span>\n\t<span class=\"token keyword\">int</span> h_length<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 地址的比特长度</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>h_addr_list<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 零字节-主机网络地址指针。网络字节顺序</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> h_addr h_addr_list[0]</span></code></pre></div>\n<p>gethostbyname() 成功时返回一个指向结构体 hostent 的指针,或者 是个空 (NULL)指 针 。 ( 但 是 和 以 前 不 同 , 不 设 置 errno , h_errno 设 置 错 误 信 息 。)</p>\n<p>参照代码例子, 加快理解:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">hostent</span><span class=\"token operator\">*</span> ht<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> pptr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> type<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"usage: ./filename [address] \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ht <span class=\"token operator\">=</span> <span class=\"token function\">gethostbyname</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">herror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main gethostbyname error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//打印所有信息</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host name is: %s \"</span><span class=\"token punctuation\">,</span> ht<span class=\"token operator\">-></span>h_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//打印所有的主机地址</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>pptr<span class=\"token operator\">=</span>ht<span class=\"token operator\">-></span>h_aliases<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>pptr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alias of host: %s \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host addrtype is: %d \"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> ht<span class=\"token operator\">-></span>h_addrtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host length is: %d \"</span><span class=\"token punctuation\">,</span> ht<span class=\"token operator\">-></span>h_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">==</span>AF_INET <span class=\"token operator\">||</span> type<span class=\"token operator\">==</span>AF_INET6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">char</span> ip<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>pptr <span class=\"token operator\">=</span> ht<span class=\"token operator\">-></span>h_addr_list<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>pptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">inet_ntop</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pptr<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address: %s \"</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>五. 消息发送与接收</h2>\n<p>前面我们已经讲了如何创建,绑定, 监听, 连接套接字的操作, 可能等不及的同学已经开始想, 那怎么通过套接字发送数据呢. 这一小节我们就来讲消息发送接收的函数调用.</p>\n<p>在这之前,附上一张简单但很重要的流程图, 纵使这系列后面的内容说的再天花乱坠, 实质上也是这图上的流程. 特别是刚起步的同学, 记住这张图, 就把握了整体的流程脉络, 不至于代码无从敲起.</p>\n<p>￼<img src=\"https://img-blog.csdnimg.cn/20181202105310984.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTU4Mjg1,size_16,color_FFFFFF,t_70\" alt=\"socket通信CS模式示意图\"></p>\n<h3>1. send() 和 recv() 函数</h3>\n<p>这两个函数用于流式套接字或者数据报套接字的通讯。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token comment\">// send — send a message on a socket</span>\nssize_t <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// recv — receive a message from a connected socket</span>\nssize_t <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>socket</strong> 是你想发送数据的套接字描述符(或者是调用 socket() 或者是 accept() 返回的 )\n<strong>buffer</strong> 是指向你想发送的数据的指针。\n<strong>length</strong> 是数据的长度。\n把 flags 设置为 0 就可以了, 刚开始用不上(详细的资料请看 send() 的 man page)</p>\n<p>send() 返回<code class=\"language-text\">实际发送的数据的字节数</code>—它可能小于你要求发送的数 目!\n注意,有时候你告诉它要发送一堆数据可是它不能处理成功。它只是 发送它可能发送的数据,然后希望你能够发送其它的数据。记住,如果 send() 返回的数据和 len 不匹配,你就应该发送其它的数据。\n最后要说得就是,它在错误的时候返回-1,并设置 errno。</p>\n<p>recv() 函数很类似\n<strong>socket</strong> 是要读的套接字描述符。\n<strong>buffer</strong> 是要读的信息的缓冲。\n<strong>length</strong> 是缓 冲的最大长度。\n<strong>flags</strong> 可以设置为 0。(请参考 recv() 的 man page)</p>\n<p>recv() 返回<code class=\"language-text\">实际读入缓冲的数据的字节数</code>。或者在错误的时候返回-1, 同时设置 errno。</p>\n<h3>2. sendto() 和 recvfrom() 函数</h3>\n<p>这两个函数用于 无连接数据报套接字</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\nssize_t <span class=\"token function\">sendto</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span>\n\t\t   <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>dest_addr<span class=\"token punctuation\">,</span>socklen_t dest_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nssize_t <span class=\"token function\">recvfrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>restrict buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">,</span>\n           <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>restrict address<span class=\"token punctuation\">,</span>\n           socklen_t <span class=\"token operator\">*</span>restrict address_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到,sendto() 函数除了另外的两个信息外,其余的和函数 send() 是一样 的。\n<strong>dest_addr</strong> 是个指向数据结构 struct sockaddr 的指针,它包含了<code class=\"language-text\">目的地的 IP 地址和端口信息</code>。\n<strong>dest_len</strong> 可以简单地设置为 sizeof(struct sockaddr)。\n和函数 send() 类似, sendto() 返回实际发送的字节数(它也可能小于 你想要发送的字节数!),或者在错误的时候返回 -1。</p>\n<p>recvfrom() 函数也是类似, 除了两个增加的参数外,这个函数和 recv() 也是一样的。\n<strong>address</strong> 是一个指向局部数据结构 struct sockaddr 的指针,它的内容是<code class=\"language-text\">请求连接方的 IP 地址和端口信息</code>。\n<strong>address_len</strong> 是个 int 型的局部指针,它的初始值为 sizeof(struct sockaddr)。\n函数调用返回后, address_len 保存着实际储存在 address 中的地址的长度。\nrecvfrom() 返回收到的字节长度,或者在发生错误后返回 -1。</p>\n<p>问: 为什么 udp 连接的套接字函数(sendto, recvfrom) 相比与 tcp 的通信的套接字,要提供更多的参数呢?\n答: 这是因为 tcp 是面向连接的协议,在双方通信之前,是已经建立好了连接, 直接 send 数据, 便可发到连接另一端的消息接收方;\n而 udp 是无连接的协议, 通信之间没有建立连接, 所以在发送消息时, 必须指明消息接收方的地址信息(IP 地址及端口号), 才能将消息发送给对方.</p>\n<p>注: 如果你用 connect() 连接一个数据报套接字,你可以简单的调 用 send() 和 recv() 来满足你的要求。这个时候依然是数据报套接字,依 然使用 UDP,系统套接字接口会为你自动加上了目标和源的信息</p>\n<p>原来是不想贴代码的, 但怕有些人看完上面的内容,急不可耐的向感受一下, 还是给附上一个最简单的 demo:\n更多代码移步我 github: <a href=\"https://github.com/D-lyw/Socket_C_linux\">https://github.com/D-lyw/Socket_C_linux</a> 查看相关代码: <a href=\"https://github.com/D-lyw/Socket_C_linux\">tcp, udp, ping, tracert, dns, ftp…</a></p>\n<p>tcp_server.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\n * @Author: D-lyw\n * @Date: 2018-10-25 00:48:44\n * @Last Modified by: D-lyw\n * @Last Modified time: 2018-11-16 12:29:37\n */</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERVADDR_PORT 8800</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>LOCALIP <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 定义变量存储生成或接收的套接字描述符</span>\n    <span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">,</span> recvfd<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 定义一个数据结构用来存储套接字的协议,ip,端口等地址结构信息</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> servaddr<span class=\"token punctuation\">,</span> clientaddr<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 定义接收的套接字的数据结构的大小</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> cliaddr_len<span class=\"token punctuation\">,</span> recvLen<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> recvBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//创建用于帧听的套接字</span>\n    listenfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 给套接字数据结构赋值,指定ip地址和端口号</span>\n    servaddr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n    servaddr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>SERVADDR_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    servaddr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>LOCALIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 绑定套接字</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>servaddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>servaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"绑定套接字失败,%s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 监听请求</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"绑定套接字失败,%s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cliaddr_len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 等待连接请求</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 接受由客户机进程调用connet函数发出的连接请求</span>\n        recvfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>clientaddr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cliaddr_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到请求套接字描述符: %d \"</span><span class=\"token punctuation\">,</span> recvfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 在已建立连接的套接字上接收数据</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>recvLen <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>recvfd<span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"接收数据错误, %s \"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>recvfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>tcp_client.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\n * @Author: D-lyw\n * @Date: 2018-10-26 14:06:32\n * @Last Modified by: D-lyw\n * @Last Modified time: 2018-11-16 12:34:08\n * @name tcp_client.c\n * @descripe    实现最基本的创建套接字, 填充客户端信息,connet连接服务端, 可连续向服务端发送消息\n */</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> errno<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERVERPORT 8800</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 定义变量存储本地套接字描述符</span>\n    <span class=\"token keyword\">int</span> clifd<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 设置本地ip地址</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> serverIp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 定义套接字结构存储套接字的ip,port等信息</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> cliaddr_in<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 定义发送,接收缓冲区大小</span>\n    <span class=\"token keyword\">char</span> sendBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> recvBuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 创建套接字</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>clifd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"创建套接字失败,%s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 填充 服务器端结构体信息</span>\n    cliaddr_in<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n    cliaddr_in<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>serverIp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cliaddr_in<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>SERVERPORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 请求连接服务器进程</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>clifd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>cliaddr_in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"请求连接服务器失败, %s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hi,hi, severs!  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 发送打招呼消息</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>clifd<span class=\"token punctuation\">,</span> sendBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"send message error:(, %s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 阻塞等待输入,发送消息</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>sendBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>clifd<span class=\"token punctuation\">,</span> sendBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"send message error:(, %s \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>clifd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>终于写完了, 如果觉得写的还可以,请点个赞 :）．．．\n这是 Linux 网络编程系列的第一篇文章, 感兴趣的同学, 可浏览该系列的其他文章</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_36958285/article/details/84675689\">Linux 网络编程篇之 ICMP 协议分析及 ping 程序实现</a></li>\n<li><a href=\"https://blog.csdn.net/qq_36958285/article/details/84671973\">Linux 网络编程之 TCP 及聊天室功能实现</a></li>\n<li>未完待续…</li>\n</ul>","timeToRead":19,"frontmatter":{"title":"Socket网络编程之基础篇","date":"2019-08-13","description":null}}},"pageContext":{"slug":"/basic-knowledge-about-socket-programming/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":{"fields":{"slug":"/code-a-chatting-room-in-linux-by-socket.md/"},"frontmatter":{"title":"手把手带你用Linux socket 写个聊天室demo"}}}}}